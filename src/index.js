"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
const myAddress = miWallet.address;
console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
console.log(myAddress.pretty());
const searchMosaic = (address) => {
    return new Promise((resolve, reject) => {
        console.log(`Buscando mosaico en la direccion: ${address.pretty()}`);
        const myAccount = new nem_library_1.AccountHttp();
        myAccount.getMosaicOwnedByAddress(address).subscribe(mosaics => {
            try {
                resolve(mosaics.find((mosaic) => {
                    return mosaic.mosaicId.name === 'doctatst';
                }));
            }
            catch (err) {
                console.log(`${err}`);
                console.log('Please try again');
                reject();
            }
            ;
        });
    });
};
const imprimeMosaico = () => __awaiter(this, void 0, void 0, function* () {
    const pp = yield searchMosaic(myAddress);
    console.log('Hola xyz');
    console.log(`El mosaico encontrado es: ${pp.mosaicId.name}`);
    const pptransfer = new nem_library_1.MosaicTransferable.
    ;
});
imprimeMosaico();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBVUEsNkNBRThFO0FBRzlFLG1EQUFrRDtBQUtsRCxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFHekIsd0JBQVUsQ0FBQyxTQUFTLENBQUMsMEJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUc1QyxNQUFNLFlBQVksR0FBRyxJQUFJLHNCQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQThDeEQsTUFBTSxVQUFVLEdBQUcsaUNBQWlDLENBQUM7QUFFckQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUM7QUFDeEMsSUFBSSxrQkFBa0IsR0FBRyxHQUFHLFVBQVUsS0FBSyxnQkFBZ0IsRUFBRSxDQUFDO0FBQzlELE1BQU0sU0FBUyxHQUFHLCtCQUFlLEVBQUUsQ0FBQztBQTBKcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2RUFBNkUsQ0FBQyxDQUFDO0FBQzNGLE1BQU0sY0FBYyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsR0FBRyxrQkFBa0IsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0FBQ3hFLE1BQU0sUUFBUSxHQUFHLDBCQUFZLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQzFELE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUM7QUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrRUFBa0UsQ0FBQyxDQUFDO0FBQ2hGLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7QUFHaEMsTUFBTSxZQUFZLEdBQUcsQ0FBQyxPQUFnQixFQUFtQixFQUFFO0lBQzFELE9BQU8sSUFBSSxPQUFPLENBQVMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDOUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQ0FBcUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVuRSxNQUFNLFNBQVMsR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQztRQUNwQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQzdELElBQUc7Z0JBQ0QsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtvQkFDOUIsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7Z0JBQzdDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDTDtZQUFDLE9BQU0sR0FBRyxFQUFFO2dCQUNYLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO2dCQUN2QixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7Z0JBQ2hDLE1BQU0sRUFBRSxDQUFDO2FBQ1Q7WUFBQSxDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTixDQUFDLENBQUMsQ0FBQztBQUNKLENBQUMsQ0FBQztBQUdGLE1BQU0sY0FBYyxHQUFHLEdBQVMsRUFBRTtJQUNoQyxNQUFNLEVBQUUsR0FBRyxNQUFNLFlBQVksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN6QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ3hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztJQUc3RCxNQUFNLFVBQVUsR0FBRyxJQUFJLGdDQUFrQjtRQUUzQyxBQUY0QyxKQUFBLENBQUE7QUFFNUMsQ0FBQyxDQUFBLENBQUM7QUFJRixjQUFjLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbi8vIFByaW1lciBlamVtcGxvLi4uXHJcbi8vIFBydWViYSBkZSBlbnRvcm5vLiBFbCBjbGFzaWNvIGhlbGxvIHdvcmxkLlxyXG5cclxuY29uc3Qgc01lc3NhZ2UgPSAnSGVsbG8gd29ybGQhISEnXHJcbmNvbnNvbGUubG9nKHNNZXNzYWdlKVxyXG5cclxuKi9cclxuXHJcbi8vIEltcG9ydGFjaW9uIGRlIGRpZmVyZW50ZXMgb2JqZXRvcyBkZXNkZSBsYSBORU0gTGlicmFyeVxyXG5pbXBvcnQge05FTUxpYnJhcnksIE5ldHdvcmtUeXBlcywgUGFzc3dvcmQsIFNpbXBsZVdhbGxldCwgQWNjb3VudEh0dHAsIEFkZHJlc3MsXHJcbiAgICAgICAgTW9zYWljSHR0cCwgUXVlcnlQYXJhbXMsIFRyYW5zYWN0aW9uSHR0cCwgVGltZVdpbmRvdywgVHJhbnNmZXJUcmFuc2FjdGlvbixcclxuICAgICAgICBQbGFpbk1lc3NhZ2UsIEFjY291bnQsIE1vc2FpY1RyYW5zZmVyYWJsZSwgTW9zYWljfSBmcm9tICduZW0tbGlicmFyeSc7XHJcblxyXG4vLyBJbXBvcnRhY2lvbiBkZSBtb2R1bG8gY29uIGZ1bmNpb25lcyB1dGlsZXNcclxuaW1wb3J0IHsgdGltZVN0YW1wUHJldHR5IH0gZnJvbSAnLi9wcml2RnVuY3Rpb25zJztcclxuXHJcbi8vIERpc3BvbmliaWxpemFjaW9uIGRlbCBvYmpldG8gZnMgKGZpbGUgc3lzdGVtKSBlbiBsYSB2YXJpYWJsZSBmc1xyXG4vLyBMdWVnbyBlc3RhIHZhcmlhYmxlIG5vcyBwZXJtaXRpcmEgaW50ZXJhY3R1YXIgY29uIGVsIHNpc3RlbWEgZGVcclxuLy8gYXJjaGl2b3MgZGVsIHNpc3RlbWEgb3BlcmF0aXZvXHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuXHJcbi8vIENvbmZpZ3VyYWNpb24gZGUgbGEgcmVkIGRlIE5FTSBzb2JyZSBsYSBxdWUgcXVlcmVtb3MgdHJhYmFqYXJcclxuTkVNTGlicmFyeS5ib290c3RyYXAoTmV0d29ya1R5cGVzLlRFU1RfTkVUKTtcclxuXHJcbi8vIFZhcmlhYmxlIHBhcmEgcmVzZ3VhcmRhciBlbCBwYXNzd29yZFxyXG5jb25zdCBtaVdhbGxldFBhc3MgPSBuZXcgUGFzc3dvcmQoJzAxUHJpbWVyVGVzdFdhbGxldCcpO1xyXG4vLyBUQ0dPSUVQS1NMVFg2VDJFTk1VWVQ0M0gyWkhNRUNIRTZDUFdEUTZOXHJcbi8vIFRDR09JRS1QS1NMVFgtNlQyRU5NLVVZVDQzSC0yWkhNRUMtSEU2Q1BXLURRNk5cclxuXHJcbi8qXHJcbi8vIFNlZ3VuZG8gRWplbXBsby4uLlxyXG4vLyBDcmVhY2lvbiBkZSB1bmEgd2FsbGV0LlxyXG5cclxuY29uc3QgdHN0V2FsbGV0ID0gU2ltcGxlV2FsbGV0LmNyZWF0ZSgnV2FsbGV0IFRlc3QnLCBtaVdhbGxldFBhc3MpO1xyXG5jb25zb2xlLmxvZygnQSBjb250aW51YWNpb24gbGEgaW5mb3JtYWNpb24gZGUgbGEgd2FsbGV0IGNyZWFkYTpcXG4nKTtcclxuY29uc29sZS5sb2codHN0V2FsbGV0KTtcclxuY29uc29sZS5sb2coJ1xcbicpO1xyXG4qL1xyXG5cclxuLypcclxuLy8gVGVyY2VyIEVqZW1wbG9cclxuLy8gQ29uc3VsdGEgbGFzIHRyYW5zYWNjaW9uZXMgZGUgdW5hIGN1ZW50YS5cclxuLy8gT2pvIGNvbiBlbCBjb21wb3J0YW1pZW50byBhc2luY3Jvbm8uIFZlciBxdWUgc3VjZWRlIGVudHJlIGxhIGltcHJlc2lvbiBkZSBsYXMgdHJhbnNhY2Npb25lcyB5IGVsIG1lbnNhamUgZGUgZmluIHkgc2FsaWRhXHJcblxyXG5jb25zdCBteUFkZHJlc3MgPSBuZXcgQWRkcmVzcygnVEJJVVFNT0dIVUg3R041TE02MkNRNUNJNEpFWE1XVTQ1NUlQSElZWicpO1xyXG5cclxuY29uc29sZS5sb2coJz09Pj5SZWFsaXphbmRvIHVuYSBjb25zdWx0YSBhIGxhIFRFU1RORVQuLi5cXG4nKVxyXG5jb25zdCBhY2NvdW50SHR0cCA9IG5ldyBBY2NvdW50SHR0cCgpO1xyXG5cclxuYWNjb3VudEh0dHAuYWxsVHJhbnNhY3Rpb25zKG15QWRkcmVzcylcclxuLnN1YnNjcmliZShhbGxUcmFuc2FjdGlvbnMgPT4ge1xyXG5cdGNvbnNvbGUubG9nKGFsbFRyYW5zYWN0aW9ucyk7XHJcbn0pO1xyXG5cclxuY29uc29sZS5sb2coJ1xcbj09Pj5UZXJtaW5hbmRvIHkgc2FsaWVuZG8uLi5cXG4nKVxyXG5cclxuXHJcbi8vIE90cm8gZWplbXBsby5cclxuLy8gQ29uc3VsdGFuZG8gdG9kb3MgbG9zIG1vc2FpY29zIGRlbnRybyBkZSB1biBOYW1lU3BhY2UgZGFkbywgZW4gZXN0ZSBjYXNvIFwiZG9jdGFcIlxyXG5jb25zb2xlLmxvZygnPT0+PlJlYWxpemFuZG8gdW5hIGNvbnN1bHRhIHNvYnJlIG1vc2FpY29zLi4uXFxuJylcclxuY29uc3QgbW9zYWljSHR0cCA9IG5ldyBNb3NhaWNIdHRwKCk7XHJcbmNvbnN0IG5hbWVTcGFjZT0nZG9jdGFfdGVzdCc7XHJcblxyXG5tb3NhaWNIdHRwLmdldEFsbE1vc2FpY3NHaXZlbk5hbWVzcGFjZShuYW1lU3BhY2UpLnN1YnNjcmliZShtb3NhaWNEZWZpbml0aW9ucyA9PiB7XHJcblx0Y29uc29sZS5sb2cobW9zYWljRGVmaW5pdGlvbnMpO1xyXG59KTtcclxuXHJcbmNvbnNvbGUubG9nKCdcXG49PT4+VGVybWluYW5kbyB5IHNhbGllbmRvLi4uXFxuJylcclxuKi9cclxuXHJcbi8vIFZhcmlhYmxlIGRvbmRlIHNlIGFsbWFjZW5hIGxhIHJ1dGEgZG9uZGUgc2UgdmEgYSBlc2NyaWJpciBlbCBhcmNoaXZvIGRlIGxhIHdhbGxldCBjcmVhZGEuXHJcbmNvbnN0IHJ1dGFXYWxsZXQgPSAnQzpcXFxcX0N1cnNvXFxcXENyeXB0b1Byb2plY3RzXFxcXGJpbic7XHJcbi8vIFZhcmlhYmxlIHF1ZSByZWdpc3RyYSBlbCBub21icmUgZGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0IGEgZ3VhcmRhclxyXG5jb25zdCBub21icmVXYWxsZXRGaWxlID0gJ21pV2FsbGV0LndsdCc7XHJcbmxldCBmdWxsRmlsZVdhbGxldFBhdGggPSBgJHtydXRhV2FsbGV0fVxcXFwke25vbWJyZVdhbGxldEZpbGV9YDtcclxuY29uc3QgdGltZXN0YW1wID0gdGltZVN0YW1wUHJldHR5KCk7XHJcblxyXG4vKlxyXG4vLyBDdWFydG8gRWplbXBsb1xyXG4vLyBTYWx2YXIgZW4gZGlzY28gdW5hIHdhbGxldFxyXG5cclxuY29uc29sZS5sb2coJz09Pj5TYWx2YW5kbyBsYSB3YWxsZXQuLi5cXG4nKVxyXG5cclxuLy9TZSB2ZXJpZmljYSBzaSB5YSBleGlzdGUgdW5hIHdhbGxldFxyXG5pZiAoZnMuZXhpc3RzU3luYyhmdWxsRmlsZVdhbGxldFBhdGgpKXtcclxuXHQvLyBTZSBleGlzdGUgdW4gYXJjaGl2byBkZSB3YWxsZXQsIHNlIGNhbWJpYSBlbCBub21icmUgdXNhbmRvIHVuIHRpbWVzdGFtcFxyXG5cdGZ1bGxGaWxlV2FsbGV0UGF0aCA9IGAke3J1dGFXYWxsZXR9XFxcXCR7dGltZXN0YW1wfV8ke25vbWJyZVdhbGxldEZpbGV9YDtcclxufTtcclxuXHJcbi8vIFNlIHBhc2EgbGEgd2FsbGV0IGRlIE5FTSBhIHVuIHN0cmluZyB1ZSBsdWVnbyBwdWVkZSBzZXIgXCJiYWphZG9cIiBhIGRpc2NvXHJcbmNvbnN0IHdhbGxldFN0cmluZyA9IHRzdFdhbGxldC53cml0ZVdMVEZpbGUoKTtcclxuXHJcbi8vIExhIHNpZ3VpZW50ZSBsaW5lYSBlcyBsYSBxdWUgXCJiYWphIGEgZGlzY29cIiBlbCBcInN0cmluZ1wiIGRlIGxhIHdhbGxldCBkZSBORU0gY3JlYWRhXHJcbmZzLndyaXRlRmlsZVN5bmMoZnVsbEZpbGVXYWxsZXRQYXRoLCB3YWxsZXRTdHJpbmcpO1xyXG5jb25zb2xlLmxvZyhgXFxuPT0+PkxhIHdhbGxldCBzZSBndWFyZG8gZXhpdG9zYW1lbnRlIGVuOiAke2Z1bGxGaWxlV2FsbGV0UGF0aH1cXG5gKTtcclxuXHJcbi8vIC8vIEVzY3JpYmllbmRvIGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0LCBwZXJvIGVzdGEgdmV6IGRlIGZvcm1hIGFzaW5jcm9uYS5cclxuLy8gZnMud3JpdGVGaWxlKGAke2Z1bGxGaWxlV2FsbGV0UGF0aH1gLCB3YWxsZXRTdHJpbmcsIChlcnIpID0+IHtcclxuLy8gICAgIC8vIFNpIGxhIGVzY3JpdHVyYSBkZSBsYSB3YWxsZXQgZGEgZXJyb3IsIHNlIGNhcHR1cmEgZWwgZXJyb3JcclxuLy8gICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuLy9cclxuLy8gICAgIC8vIHNpIHZhIHRvZG8gYmllbiwgc2UgZGEgdW4gbWVuc2FqZSBkZSBleGl0b1xyXG4vLyAgICAgY29uc29sZS5sb2coYFxcbj09Pj5MYSB3YWxsZXQgc2UgZ3VhcmRvIGV4aXRvc2FtZW50ZSBlbjogJHtydXRhV2FsbGV0fSR7bm9tYnJlV2FsbGV0RmlsZX1cXG5gKVxyXG4vLyB9KTtcclxuKi9cclxuXHJcbi8qXHJcbi8vIFF1aW50byBFamVtcGxvXHJcbi8vIExleWVuZG8gdW5hIHdhbGxldCBkZXNkZSBlbCBkaXNjb1xyXG5cclxuXHJcbi8vIExleWVuZG8gZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQuLi5cclxuY29uc29sZS5sb2coJ0NhcmdhbmRvIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2byAoZW4gY3J1ZG8pIGRlIGxhIHdhbGxldCBlbiB1bmEgdmFyaWFibGVcXG4nKTtcclxuY29uc3QgdG1wU3RyTWlXYWxsZXQgPSBmcy5yZWFkRmlsZVN5bmMoYCR7ZnVsbEZpbGVXYWxsZXRQYXRofWAsICd1dGY4Jyk7XHJcbmNvbnNvbGUubG9nKCdcXG5FbCBhcmNoaXZvIFwicHVyb1wiIGRlIGxhIHdhbGxldCBjb250aWVuZTpcXG4nKTtcclxuY29uc29sZS5sb2codG1wU3RyTWlXYWxsZXQpO1xyXG5jb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG5cclxuLy8gU2kgbGEgd2FsbGV0IGEgbGVlciBmdWUgY3JlYWRhIGRlIG1hbmVyYSBzZW5jaWxsYSwgZXMgZGVjaXIsIHNpbiB1c2FyIGxhIFwiTmFubyBXYWxsZXRcIi5cclxuY29uc3QgbWlXYWxsZXQgPSBTaW1wbGVXYWxsZXQucmVhZEZyb21XTFQodG1wU3RyTWlXYWxsZXQpO1xyXG5cclxuLy8gU2kgbGEgd2FsbGV0IGEgbGVlciBmdWUgY3JlYWRhIGNvbiBsYSBcIk5hbm8gV2FsbGxldFwiXHJcbi8vY29uc3QgbWlXYWxsZXQgPSBTaW1wbGVXYWxsZXQucmVhZEZyb21OYW5vV2FsbGV0V0xGKHRtcFN0ck1pV2FsbGV0KTtcclxuXHJcbmNvbnNvbGUubG9nKCdcXG5FbCBjb250ZW5pZG8gZGUgbGEgd2FsbGV0IHNlZ3VuIE5FTSBlczpcXG4nKTtcclxuY29uc29sZS5sb2cobWlXYWxsZXQpO1xyXG5jb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG5jb25zb2xlLmxvZygnXFxuQWJyaWVuZG8gbGEgd2FsbGV0IHBhcmEgdmVyIGxhIGluZm9ybWFjaW9uIGRldGFsbGFkYSBkZSBsYSBtaXNtYTpcXG4nKTtcclxuY29uc3QgbWlDdWVudGEgPSBtaVdhbGxldC5vcGVuKG1pV2FsbGV0UGFzcyk7XHJcbmNvbnNvbGUubG9nKCdcXG5MYSBpbmZvcm1hY2lvbiBkZSBsYSBjdWVudGEgY29udGVuaWRhIGVuIGxhIHdhbGxldCBlczpcXG4nKTtcclxuY29uc29sZS5sb2cobWlDdWVudGEpO1xyXG5jb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG5cclxuLy8gRXh0cmFlIGxhIGFkZHJlc3MgbyBkaXJlY2Npb24gZGUgbGEgd2FsbGV0LlxyXG4vLyBMYSBhZGRyZXNzIHNlIHB1ZWRlIGV4dHJhZXIgZGUgbGEgbWlzbWEgd2FsbGV0IG8gZGUgbGEgY3VlbnRhXHJcbmNvbnN0IG15QWRkcmVzcyA9IG1pV2FsbGV0LmFkZHJlc3M7XHJcbmNvbnNvbGUubG9nKCdMYSBhZGRyZXNzIG8gZGlyZWNjaW9uIGRlIGxhIGN1ZW50YSBjb250ZW5pZGEgZW4gbGEgd2FsbGV0IGVzOlxcbicpO1xyXG5jb25zb2xlLmxvZyhteUFkZHJlc3MucHJldHR5KCkpO1xyXG5jb25zb2xlLmxvZygnXFxuJyk7XHJcbiovXHJcblxyXG4vKlxyXG4vLyBTZXh0byBFamVtcGxvXHJcbi8vIEVudmlhciB0b2tlblxyXG5cclxuLy8gQ3JlYSB1bmEgdHJhc25zYWNjaW9uXHJcbmNvbnN0IHRyYW5zYWN0aW9uSHR0cCA9IG5ldyBUcmFuc2FjdGlvbkh0dHAoKTtcclxuXHJcbi8vIFNlIGd1YXJkYSBlbiB1bmEgdmFyaWFibGUgdGVtcG9yYWwgbGEgY2xhdmUgcHJpdmFkYSBkZSBxdWllbiBlbnZpYVxyXG4vLyBMbyBpbnRlcmVzYW50ZSBzZXJpYSBhYnJpciBsYSB3YWxsZXQsIHNhY2FyIGxhIGRhdGEgeSBjb24gZXN0YSBkYXRhIGZpcm1hciBsYSB0cmFuc2FjY2lvbi5cclxuLy9jb25zdCBwcml2YXRlS2V5OiBzdHJpbmcgPSBwcm9jZXNzLmVudi5QUklWQVRFX0tFWTtcclxuY29uc3QgcHJpdmF0ZUtleTogc3RyaW5nID0gXCIzOWJlZDBhMmFhMjdhZWVkZDczNzQ3ODhjY2VmYTY0NGQ3OGMyNWY4Y2IxZTA2YjYwODBjOTZhZGY2YjMyY2FhXCI7XHJcblxyXG4vLyBDcmVhIHVuYSBjdWVudGEgY29uIGxhIGNsYXZlIHByaXZhZGEuXHJcbmNvbnN0IGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZVdpdGhQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xyXG5cclxuLy9jb25zdCB0cmFuc2ZlclRyYW5zYWN0aW9uID0gVHJhbnNmZXJUcmFuc2FjdGlvbi5jcmVhdGUoXHJcbi8vICAgIFRpbWVXaW5kb3cuY3JlYXRlV2l0aERlYWRsaW5lKCksXHJcbi8vICAgIG5ldyBBZGRyZXNzKFwiVEFTRUJSLUUzT1lLWi1EQzVYS0EtUUxBSVhYLUlMTExIQi1RUk5TRlItTVNKUFwiKSxcclxuLy8gICAgbmV3IFhFTSgwKSxcclxuLy8gICAgUGxhaW5NZXNzYWdlLmNyZWF0ZShcIkEgdmVyIHNpIGxsZWdhIGVsIG1lbnNhamUuLi5cIilcclxuLy8pO1xyXG5cclxuLy8gQ3JlYSB1bmEgdHJhbnNhY2Npb24geSBsYSBlbnZpYS4uLlxyXG5jb25zdCB0cmFuc2ZlclRyYW5zYWN0aW9uID0gVHJhbnNmZXJUcmFuc2FjdGlvbi5jcmVhdGUoXHJcbiAgICBUaW1lV2luZG93LmNyZWF0ZVdpdGhEZWFkbGluZSgpLFxyXG4gICAgbmV3IEFkZHJlc3MoXCJURFU3TEpGRjVTWjZSQTNXT1BONTRITU5SMlFMTzVYSTNXRFZOSUgzXCIpLFxyXG4gICAgbmV3IFhFTSg1KSxcclxuICAgIFBsYWluTWVzc2FnZS5jcmVhdGUoXCJQcm9ncmFtYW5kbyBlbiBlbCBBY2NlbGVyYXRvciBCbG9ja2NoYWluISEhXCIpXHJcbik7XHJcblxyXG5jb25zdCBzaWduZWRUcmFuc2FjdGlvbiA9IGFjY291bnQuc2lnblRyYW5zYWN0aW9uKHRyYW5zZmVyVHJhbnNhY3Rpb24pO1xyXG5cclxuY29uc29sZS5sb2coc2lnbmVkVHJhbnNhY3Rpb24pO1xyXG5cclxudHJhbnNhY3Rpb25IdHRwLmFubm91bmNlVHJhbnNhY3Rpb24oc2lnbmVkVHJhbnNhY3Rpb24pLnN1YnNjcmliZSh4ID0+IGNvbnNvbGUubG9nKHgpKTtcclxuKi9cclxuXHJcbi8qXHJcbi8vIFNlcHRpbW8gRWplbXBsb1xyXG4vLyBSZXZpc2FyIGJhbGFuY2VzXHJcblxyXG5cclxuLy8gUmV2aXNhciBiYWxhbmNlIGRlIFhFTVxyXG4vLyBSZXZpc2FyIGJsYW5jZXMgZGUgTU9TQUlDc1xyXG5cclxuY29uc3QgbXlBY2NvdW50ID0gbmV3IEFjY291bnRIdHRwKCk7XHJcbm15QWNjb3VudC5nZXRNb3NhaWNPd25lZEJ5QWRkcmVzcyhteUFkZHJlc3MpLnN1YnNjcmliZShtb3NhaWNzID0+IHtcclxuICBjb25zdCB4ZW1Nb3NhaWMgPSBtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xyXG5cdFx0cmV0dXJuIG1vc2FpYy5tb3NhaWNJZC5uYW1lID09PSAneGVtJztcclxuXHR9KTtcclxuXHRpZiAoIXhlbU1vc2FpYykge1xyXG4gICAgY29uc29sZS5sb2coJ0xhIGNhbnRpZGFkIFhFTSBlczogMCcpO1xyXG4gIH0gZWxzZSB7XHJcblx0ICAgY29uc29sZS5sb2coYExhIGNhbnRpZGFkIFhFTSBlczogJHt4ZW1Nb3NhaWMucXVhbnRpdHkgLyAxZTZ9YCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZG9jdGFNb3NhaWMgPSBtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xyXG4gICAgcmV0dXJuIG1vc2FpYy5tb3NhaWNJZC5uYW1lID09PSAnZG9jdGF0c3QnO1xyXG4gIH0pO1xyXG4gIGlmICghZG9jdGFNb3NhaWMpIHtcclxuICAgIGNvbnNvbGUubG9nKCdMYSBjYW50aWRhZCBkb2N0YXRzdCBlczogMCcpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAgY29uc29sZS5sb2coYExhIGNhbnRpZGFkIGRvY3RhdHN0IGVzOiAke2RvY3RhTW9zYWljLnF1YW50aXR5IC8gMWU2fWApO1xyXG4gIH07XHJcbn0pO1xyXG4qL1xyXG5cclxuLypcclxuLy8gT2N0YXZvIEVqZW1wbG9cclxuLy8gSGFjZXIgdHJhbnNhY2Npb25lc1xyXG4qL1xyXG5cclxuLy8gRGV2IEFjY291bnRcclxuLy8gQWNjb3VudCB7XHJcbi8vICAgYWRkcmVzczogQWRkcmVzcyB7XHJcbi8vICAgICB2YWx1ZTogJ1RDR09JRVBLU0xUWDZUMkVOTVVZVDQzSDJaSE1FQ0hFNkNQV0RRNk4nLFxyXG4vLyAgICAgbmV0d29ya1R5cGU6IDE1MlxyXG4vLyAgIH0sXHJcbi8vICAgcHVibGljS2V5OiAnOTUwYzhjOTkzMDlkNjI0ODFkMjdlZTY3MzYxMmQyZjljNjY5NmI1OTYyMTM4NGZhN2Y0NjFmMTc2ZmZmYjU5ZCcsXHJcbi8vICAgcHJpdmF0ZUtleTogJ2M0YzQwNTA0ZmRlZDAyODg0NTViMmRiYjAyYWQ0N2ZmYmEwZGJhYjMxYTg4MjI1MTM5MWE0NTQ5MDU4NTdiOWMnXHJcbi8vIH1cclxuLy9cclxuLy8gVEFTRUJSRTNPWUtaREM1WEtBUUxBSVhYSUxMTEhCUVJOU0ZSTVNKUCA9PT4+IEVzdGEgZXMgbWkgbmFub3dhbGxldCBEb2N0YVxyXG5cclxuLy8gTGV5ZW5kbyBlbCBhcmNoaXZvIGRlIGxhIHdhbGxldC4uLlxyXG5jb25zb2xlLmxvZygnQ2FyZ2FuZG8gZWwgY29udGVuaWRvIGRlbCBhcmNoaXZvIChlbiBjcnVkbykgZGUgbGEgd2FsbGV0IGVuIHVuYSB2YXJpYWJsZVxcbicpO1xyXG5jb25zdCB0bXBTdHJNaVdhbGxldCA9IGZzLnJlYWRGaWxlU3luYyhgJHtmdWxsRmlsZVdhbGxldFBhdGh9YCwgJ3V0ZjgnKTtcclxuY29uc3QgbWlXYWxsZXQgPSBTaW1wbGVXYWxsZXQucmVhZEZyb21XTFQodG1wU3RyTWlXYWxsZXQpO1xyXG5jb25zdCBteUFkZHJlc3MgPSBtaVdhbGxldC5hZGRyZXNzO1xyXG5jb25zb2xlLmxvZygnTGEgYWRkcmVzcyBvIGRpcmVjY2lvbiBkZSBsYSBjdWVudGEgY29udGVuaWRhIGVuIGxhIHdhbGxldCBlczpcXG4nKTtcclxuY29uc29sZS5sb2cobXlBZGRyZXNzLnByZXR0eSgpKTtcclxuXHJcbi8vIEZ1bmNpb24gcGFyYSBidXNjYXIgdW4gbW9zYWljbyBlbiB1bmEgd2FsbGV0LlxyXG5jb25zdCBzZWFyY2hNb3NhaWMgPSAoYWRkcmVzczogQWRkcmVzcyk6IFByb21pc2U8TW9zYWljPiA9PiB7XHJcblx0cmV0dXJuIG5ldyBQcm9taXNlPE1vc2FpYz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG5cdFx0Y29uc29sZS5sb2coYEJ1c2NhbmRvIG1vc2FpY28gZW4gbGEgZGlyZWNjaW9uOiAke2FkZHJlc3MucHJldHR5KCl9YCk7XHJcblxyXG4gICAgY29uc3QgbXlBY2NvdW50ID0gbmV3IEFjY291bnRIdHRwKCk7XHJcbiAgICBteUFjY291bnQuZ2V0TW9zYWljT3duZWRCeUFkZHJlc3MoYWRkcmVzcykuc3Vic2NyaWJlKG1vc2FpY3MgPT4ge1xyXG4gICAgICB0cnl7XHJcbiAgICAgICAgcmVzb2x2ZShtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xyXG4gICAgICAgICAgcmV0dXJuIG1vc2FpYy5tb3NhaWNJZC5uYW1lID09PSAnZG9jdGF0c3QnO1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgfSBjYXRjaChlcnIpIHtcclxuICAgICAgICBjb25zb2xlLmxvZyhgJHtlcnJ9YCk7XHJcbiAgICBcdFx0XHRjb25zb2xlLmxvZygnUGxlYXNlIHRyeSBhZ2FpbicpO1xyXG4gICAgXHRcdFx0cmVqZWN0KCk7XHJcbiAgICAgIH07XHJcbiAgICB9KTtcclxuXHR9KTtcclxufTtcclxuXHJcbi8vIEZ1bmNpb24gcGFyYSBpbXByaW1pciBsYSBpbmZvcm1hY2lvbiBkZSB1biBtb3NhaWNvLlxyXG5jb25zdCBpbXByaW1lTW9zYWljbyA9IGFzeW5jICgpID0+IHtcclxuICBjb25zdCBwcCA9IGF3YWl0IHNlYXJjaE1vc2FpYyhteUFkZHJlc3MpO1xyXG4gIGNvbnNvbGUubG9nKCdIb2xhIHh5eicpO1xyXG4gIGNvbnNvbGUubG9nKGBFbCBtb3NhaWNvIGVuY29udHJhZG8gZXM6ICR7cHAubW9zYWljSWQubmFtZX1gKTtcclxuXHJcblxyXG4gIGNvbnN0IHBwdHJhbnNmZXIgPSBuZXcgTW9zYWljVHJhbnNmZXJhYmxlLlxyXG5cclxufTtcclxuXHJcbi8vY29uc3Qgc2VsZWN0ZWRNb3NhaWMgPSBuZXcgTW9zYWljVHJhbnNmZXJhYmxlKCk7XHJcblxyXG5pbXByaW1lTW9zYWljbygpO1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbi8vIC8vIENyZWEgdW5hIHRyYXNuc2FjY2lvblxyXG4vLyBjb25zdCB0cmFuc2FjdGlvbkh0dHAgPSBuZXcgVHJhbnNhY3Rpb25IdHRwKCk7XHJcbi8vXHJcbi8vIC8vIFNlIGd1YXJkYSBlbiB1bmEgdmFyaWFibGUgdGVtcG9yYWwgbGEgY2xhdmUgcHJpdmFkYSBkZSBxdWllbiBlbnZpYVxyXG4vLyAvLyBMbyBpbnRlcmVzYW50ZSBzZXJpYSBhYnJpciBsYSB3YWxsZXQsIHNhY2FyIGxhIGRhdGEgeSBjb24gZXN0YSBkYXRhIGZpcm1hciBsYSB0cmFuc2FjY2lvbi5cclxuLy8gLy9jb25zdCBwcml2YXRlS2V5OiBzdHJpbmcgPSBwcm9jZXNzLmVudi5QUklWQVRFX0tFWTtcclxuLy8gY29uc3QgcHJpdmF0ZUtleTogc3RyaW5nID0gJ2M0YzQwNTA0ZmRlZDAyODg0NTViMmRiYjAyYWQ0N2ZmYmEwZGJhYjMxYTg4MjI1MTM5MWE0NTQ5MDU4NTdiOWMnO1xyXG4vL1xyXG4vLyAvLyBDcmVhIHVuYSBjdWVudGEgY29uIGxhIGNsYXZlIHByaXZhZGEuXHJcbi8vIGNvbnN0IGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZVdpdGhQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xyXG4vL1xyXG4vLyAvLyBDcmVhIHVuYSB0cmFuc2FjY2lvbiB5IGxhIGVudmlhLi4uXHJcbi8vIGNvbnN0IHRyYW5zZmVyVHJhbnNhY3Rpb24gPSBUcmFuc2ZlclRyYW5zYWN0aW9uLmNyZWF0ZShcclxuLy8gICAgIFRpbWVXaW5kb3cuY3JlYXRlV2l0aERlYWRsaW5lKCksXHJcbi8vICAgICBuZXcgQWRkcmVzcyhcIlRBU0VCUkUzT1lLWkRDNVhLQVFMQUlYWElMTExIQlFSTlNGUk1TSlBcIiksXHJcbi8vICAgICBuZXcgWEVNKDUpLFxyXG4vLyAgICAgUGxhaW5NZXNzYWdlLmNyZWF0ZShcIlByb2dyYW1hbmRvIGVuIGVsIEFjY2VsZXJhdG9yIEJsb2NrY2hhaW4hISFcIilcclxuLy8gKTtcclxuLy8gY29uc3Qgc2lnbmVkVHJhbnNhY3Rpb24gPSBhY2NvdW50LnNpZ25UcmFuc2FjdGlvbih0cmFuc2ZlclRyYW5zYWN0aW9uKTtcclxuLy8gY29uc29sZS5sb2coc2lnbmVkVHJhbnNhY3Rpb24pO1xyXG4vLyB0cmFuc2FjdGlvbkh0dHAuYW5ub3VuY2VUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbikuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xyXG5cclxuLy8gUmV2aXNhciBjb21vIGhhY2UgbGEgdHJhbnNhY2Npb24gZW4gaHR0cHM6Ly9naXRodWIuY29tL2RnYXJjaWEzNjAvTkVNUGF5L2Jsb2IvbWFzdGVyL3NyYy9wYWdlcy90cmFuc2Zlci90cmFuc2Zlci50c1xyXG4iXX0=