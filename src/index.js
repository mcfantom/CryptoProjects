"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const pass = new nem_library_1.Password('01PrimerTestWallet');
const tstWallet = nem_library_1.SimpleWallet.create('Wallet Test', pass);
console.log('A continuacion la informacion de la wallet creada:\n');
console.log(tstWallet);
console.log('\n');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
console.log('==>>Salvando la wallet...\n');
const walletString = tstWallet.writeWLTFile();
if (fs.existsSync(fullFileWalletPath)) {
    fullFileWalletPath = `${rutaWallet}\\${timestamp}_${nombreWalletFile}`;
}
;
fs.writeFileSync(fullFileWalletPath, walletString);
console.log(`\n==>>La wallet se guardo exitosamente en: ${fullFileWalletPath}\n`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVVBLDZDQUE0SDtBQUc1SCxtREFBa0Q7QUFLbEQsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBR3pCLHdCQUFVLENBQUMsU0FBUyxDQUFDLDBCQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFNNUMsTUFBTSxJQUFJLEdBQUcsSUFBSSxzQkFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUFDaEQsTUFBTSxTQUFTLEdBQUcsMEJBQVksQ0FBQyxNQUFNLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzNELE9BQU8sQ0FBQyxHQUFHLENBQUMsc0RBQXNELENBQUMsQ0FBQztBQUNwRSxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUEyQ2xCLE1BQU0sVUFBVSxHQUFHLGlDQUFpQyxDQUFDO0FBQ3JELE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0FBQ3hDLElBQUksa0JBQWtCLEdBQUcsR0FBRyxVQUFVLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztBQUM5RCxNQUFNLFNBQVMsR0FBRywrQkFBZSxFQUFFLENBQUM7QUFFcEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBO0FBRzFDLE1BQU0sWUFBWSxHQUFHLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUc5QyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsa0JBQWtCLENBQUMsRUFBQztJQUdyQyxrQkFBa0IsR0FBRyxHQUFHLFVBQVUsS0FBSyxTQUFTLElBQUksZ0JBQWdCLEVBQUUsQ0FBQztDQUN2RTtBQUFBLENBQUM7QUFHRixFQUFFLENBQUMsYUFBYSxDQUFDLGtCQUFrQixFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ25ELE9BQU8sQ0FBQyxHQUFHLENBQUMsOENBQThDLGtCQUFrQixJQUFJLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbi8vIFByaW1lciBlamVtcGxvLi4uXHJcbi8vIFBydWViYSBkZSBlbnRvcm5vLiBFbCBjbGFzaWNvIGhlbGxvIHdvcmxkLlxyXG5cclxuY29uc3Qgc01lc3NhZ2UgPSAnSGVsbG8gd29ybGQhISEnXHJcbmNvbnNvbGUubG9nKHNNZXNzYWdlKVxyXG5cclxuKi9cclxuXHJcbi8vIEltcG9ydGFjaW9uIGRlIGRpZmVyZW50ZXMgb2JqZXRvcyBkZXNkZSBsYSBORU0gTGlicmFyeVxyXG5pbXBvcnQge05FTUxpYnJhcnksIE5ldHdvcmtUeXBlcywgUGFzc3dvcmQsIFNpbXBsZVdhbGxldCwgQWNjb3VudEh0dHAsIEFkZHJlc3MsIE1vc2FpY0h0dHAsIFF1ZXJ5UGFyYW1zfSBmcm9tICduZW0tbGlicmFyeSc7XHJcblxyXG4vLyBJbXBvcnRhY2lvbiBkZSBtb2R1bG8gY29uIGZ1bmNpb25lcyB1dGlsZXNcclxuaW1wb3J0IHsgdGltZVN0YW1wUHJldHR5IH0gZnJvbSAnLi9wcml2RnVuY3Rpb25zJztcclxuXHJcbi8vIERpc3BvbmliaWxpemFjaW9uIGRlbCBvYmpldG8gZnMgKGZpbGUgc3lzdGVtKSBlbiBsYSB2YXJpYWJsZSBmc1xyXG4vLyBMdWVnbyBlc3RhIHZhcmlhYmxlIG5vcyBwZXJtaXRpcmEgaW50ZXJhY3R1YXIgY29uIGVsIHNpc3RlbWEgZGVcclxuLy8gYXJjaGl2b3MgZGVsIHNpc3RlbWEgb3BlcmF0aXZvXHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuXHJcbi8vIENvbmZpZ3VyYWNpb24gZGUgbGEgcmVkIGRlIE5FTSBzb2JyZSBsYSBxdWUgcXVlcmVtb3MgdHJhYmFqYXJcclxuTkVNTGlicmFyeS5ib290c3RyYXAoTmV0d29ya1R5cGVzLlRFU1RfTkVUKTtcclxuXHJcbi8qXHJcbi8vIFNlZ3VuZG8gRWplbXBsby4uLlxyXG4vLyBDcmVhY2lvbiBkZSB1bmEgd2FsbGV0LlxyXG4qL1xyXG5jb25zdCBwYXNzID0gbmV3IFBhc3N3b3JkKCcwMVByaW1lclRlc3RXYWxsZXQnKTtcclxuY29uc3QgdHN0V2FsbGV0ID0gU2ltcGxlV2FsbGV0LmNyZWF0ZSgnV2FsbGV0IFRlc3QnLCBwYXNzKTtcclxuY29uc29sZS5sb2coJ0EgY29udGludWFjaW9uIGxhIGluZm9ybWFjaW9uIGRlIGxhIHdhbGxldCBjcmVhZGE6XFxuJyk7XHJcbmNvbnNvbGUubG9nKHRzdFdhbGxldCk7XHJcbmNvbnNvbGUubG9nKCdcXG4nKTtcclxuXHJcblxyXG4vKlxyXG4vLyBUZXJjZXIgRWplbXBsb1xyXG4vLyBMaXN0YSBkZSBsYXMgdHJhbnNhY2Npb25lcyBkZSB1bmEgY3VlbnRhLlxyXG4vLyBPam8gY29uIGVsIGNvbXBvcnRhbWllbnRvIGFzaW5jcm9uby4gVmVyIHF1ZSBzdWNlZGUgZW50cmUgbGEgaW1wcmVzaW9uIGRlIGxhcyB0cmFuc2FjY2lvbmVzIHkgZWwgbWVuc2FqZSBkZSBmaW4geSBzYWxpZGFcclxuXHJcbmNvbnN0IG15QWRkcmVzcyA9IG5ldyBBZGRyZXNzKCdUQklVUU1PR0hVSDdHTjVMTTYyQ1E1Q0k0SkVYTVdVNDU1SVBISVlaJyk7XHJcblxyXG5jb25zb2xlLmxvZygnPT0+PlJlYWxpemFuZG8gdW5hIGNvbnN1bHRhIGEgbGEgVEVTVE5FVC4uLlxcbicpXHJcbmNvbnN0IGFjY291bnRIdHRwID0gbmV3IEFjY291bnRIdHRwKCk7XHJcblxyXG5hY2NvdW50SHR0cC5hbGxUcmFuc2FjdGlvbnMobXlBZGRyZXNzKVxyXG4uc3Vic2NyaWJlKGFsbFRyYW5zYWN0aW9ucyA9PiB7XHJcblx0Y29uc29sZS5sb2coYWxsVHJhbnNhY3Rpb25zKTtcclxufSk7XHJcblxyXG5jb25zb2xlLmxvZygnXFxuPT0+PlRlcm1pbmFuZG8geSBzYWxpZW5kby4uLlxcbicpXHJcblxyXG5cclxuLy8gT3RybyBlamVtcGxvLlxyXG4vLyBDb25zdWx0YW5kbyB0b2RvcyBsb3MgbW9zYWljb3MgZGVudHJvIGRlIHVuIE5hbWVTcGFjZSBkYWRvLCBlbiBlc3RlIGNhc28gXCJkb2N0YVwiXHJcbmNvbnNvbGUubG9nKCc9PT4+UmVhbGl6YW5kbyB1bmEgY29uc3VsdGEgc29icmUgbW9zYWljb3MuLi5cXG4nKVxyXG5jb25zdCBtb3NhaWNIdHRwID0gbmV3IE1vc2FpY0h0dHAoKTtcclxuY29uc3QgbmFtZVNwYWNlPSdkb2N0YSc7XHJcblxyXG5tb3NhaWNIdHRwLmdldEFsbE1vc2FpY3NHaXZlbk5hbWVzcGFjZShuYW1lU3BhY2UpLnN1YnNjcmliZShtb3NhaWNEZWZpbml0aW9ucyA9PiB7XHJcblx0Y29uc29sZS5sb2cobW9zYWljRGVmaW5pdGlvbnMpO1xyXG59KTtcclxuXHJcbmNvbnNvbGUubG9nKCdcXG49PT4+VGVybWluYW5kbyB5IHNhbGllbmRvLi4uXFxuJylcclxuKi9cclxuXHJcbi8qXHJcbi8vIEN1YXJ0byBFamVtcGxvXHJcbi8vIFNhbHZhciBlbiBkaXNjbyB1bmEgd2FsbGV0XHJcbiovXHJcblxyXG4vKlxyXG5WYXJpYWJsZSBkb25kZSBzZSBhbG1hY2VuYSBhIHJ1dGEgZG9uZGUgYWxtYWNlbmFyIGxhIHdhbGxldCBjcmVhZGFcclxueSBlbCBub21icmUgZGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0IGEgZ3VhcmRhclxyXG4qL1xyXG5jb25zdCBydXRhV2FsbGV0ID0gJ0M6XFxcXF9DdXJzb1xcXFxDcnlwdG9Qcm9qZWN0c1xcXFxiaW4nO1xyXG5jb25zdCBub21icmVXYWxsZXRGaWxlID0gJ21pV2FsbGV0LndsdCc7XHJcbmxldCBmdWxsRmlsZVdhbGxldFBhdGggPSBgJHtydXRhV2FsbGV0fVxcXFwke25vbWJyZVdhbGxldEZpbGV9YDtcclxuY29uc3QgdGltZXN0YW1wID0gdGltZVN0YW1wUHJldHR5KCk7XHJcblxyXG5jb25zb2xlLmxvZygnPT0+PlNhbHZhbmRvIGxhIHdhbGxldC4uLlxcbicpXHJcblxyXG4vLyBTZSBwYXNhIGxhIHdhbGxldCBkZSBORU0gYSB1biBzdHJpbmcgdWUgbHVlZ28gcHVlZGUgc2VyIFwiYmFqYWRvXCIgYSBkaXNjb1xyXG5jb25zdCB3YWxsZXRTdHJpbmcgPSB0c3RXYWxsZXQud3JpdGVXTFRGaWxlKCk7XHJcblxyXG4vL1NlIHZlcmlmaWNhIHNpIHlhIGV4aXN0ZSB1bmEgd2FsbGV0XHJcbmlmIChmcy5leGlzdHNTeW5jKGZ1bGxGaWxlV2FsbGV0UGF0aCkpe1xyXG5cdC8vIFNlIGV4aXN0ZSB1bmEgd2FsbGV0LCBzZSBjYW1iaWEgZWwgbm9tYnJlIHVzYW5kbyB1bmEgdGltZXN0YW1wIGNvbW8gcGFydGVcclxuXHQvLyBkZWwgbWlzbW9cclxuXHRmdWxsRmlsZVdhbGxldFBhdGggPSBgJHtydXRhV2FsbGV0fVxcXFwke3RpbWVzdGFtcH1fJHtub21icmVXYWxsZXRGaWxlfWA7XHJcbn07XHJcblxyXG4vLyBMYSBzaWd1aWVudGUgbGluZWEgZXMgbGEgcXVlIFwiYmFqYSBhIGRpc2NvXCIgZWwgXCJzdHJpbmdcIiBkZSBsYSB3YWxsZXQgZGUgTkVNIGNyZWFkYVxyXG5mcy53cml0ZUZpbGVTeW5jKGZ1bGxGaWxlV2FsbGV0UGF0aCwgd2FsbGV0U3RyaW5nKTtcclxuY29uc29sZS5sb2coYFxcbj09Pj5MYSB3YWxsZXQgc2UgZ3VhcmRvIGV4aXRvc2FtZW50ZSBlbjogJHtmdWxsRmlsZVdhbGxldFBhdGh9XFxuYCk7XHJcblxyXG4vLyAvLyBFc2NyaWJpZW5kbyBlbCBhcmNoaXZvIGRlIGxhIHdhbGxldCwgcGVybyBlc3RhIHZleiBkZSBmb3JtYSBhc2luY3JvbmEuXHJcbi8vIGZzLndyaXRlRmlsZShgJHtydXRhV2FsbGV0fSR7bm9tYnJlV2FsbGV0RmlsZX1gLCB3YWxsZXRTdHJpbmcsIChlcnIpID0+IHtcclxuLy8gICAgIC8vIFNpIGxhIGVzY3JpdHVyYSBkZSBsYSB3YWxsZXQgZGEgZXJyb3IsIHNlIGNhcHR1cmEgZWwgZXJyb3JcclxuLy8gICAgIGlmIChlcnIpIHRocm93IGVycjtcclxuLy9cclxuLy8gICAgIC8vIHNpIHZhIHRvZG8gYmllbiwgc2UgZGEgdW4gbWVuc2FqZSBkZSBleGl0b1xyXG4vLyAgICAgY29uc29sZS5sb2coYFxcbj09Pj5MYSB3YWxsZXQgc2UgZ3VhcmRvIGV4aXRvc2FtZW50ZSBlbjogJHtydXRhV2FsbGV0fSR7bm9tYnJlV2FsbGV0RmlsZX1cXG5gKVxyXG4vLyB9KTtcclxuIl19