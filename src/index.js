"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
console.log('\nEl archivo "puro" de la wallet contiene:\n');
console.log(tmpStrMiWallet);
console.log('\n');
const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
console.log('\nEl contenido de la wallet segun NEM es:\n');
console.log(miWallet);
console.log('\n');
console.log('\nAbriendo la wallet para ver la informacion detallada de la misma:\n');
const miCuenta = miWallet.open(miWalletPass);
console.log('\nLa informacion de la cuenta contenida en la wallet es:\n');
console.log(miCuenta);
console.log('\n');
const myAddress = miWallet.address;
console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
console.log(myAddress.pretty());
console.log('\n');
const myAccount = new nem_library_1.AccountHttp();
myAccount.getMosaicOwnedByAddress(myAddress).subscribe(mosaics => {
    const xemMosaic = mosaics.find((mosaic) => {
        return mosaic.mosaicId.name === 'xem';
    });
    if (!xemMosaic) {
        console.log('La cantidad XEM es: 0');
    }
    else {
        console.log(`La cantidad XEM es: ${xemMosaic.quantity / 1e6}`);
    }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQVVBLDZDQUE0SDtBQUc1SCxtREFBa0Q7QUFLbEQsTUFBTSxFQUFFLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBR3pCLHdCQUFVLENBQUMsU0FBUyxDQUFDLDBCQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7QUFHNUMsTUFBTSxZQUFZLEdBQUcsSUFBSSxzQkFBUSxDQUFDLG9CQUFvQixDQUFDLENBQUM7QUE4Q3hELE1BQU0sVUFBVSxHQUFHLGlDQUFpQyxDQUFDO0FBRXJELE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0FBQ3hDLElBQUksa0JBQWtCLEdBQUcsR0FBRyxVQUFVLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztBQUM5RCxNQUFNLFNBQVMsR0FBRywrQkFBZSxFQUFFLENBQUM7QUFxQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkVBQTZFLENBQUMsQ0FBQztBQUMzRixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLEdBQUcsa0JBQWtCLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUN4RSxPQUFPLENBQUMsR0FBRyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7QUFDNUQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBSWxCLE1BQU0sUUFBUSxHQUFHLDBCQUFZLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBSzFELE9BQU8sQ0FBQyxHQUFHLENBQUMsNkNBQTZDLENBQUMsQ0FBQztBQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFFbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1RUFBdUUsQ0FBQyxDQUFDO0FBQ3JGLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0REFBNEQsQ0FBQyxDQUFDO0FBQzFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUtsQixNQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDO0FBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0VBQWtFLENBQUMsQ0FBQztBQUNoRixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO0FBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7QUFpRGxCLE1BQU0sU0FBUyxHQUFHLElBQUkseUJBQVcsRUFBRSxDQUFDO0FBQ3BDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7SUFDL0QsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFFO1FBQzFDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEtBQUssS0FBSyxDQUFDO0lBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ0gsSUFBSSxDQUFDLFNBQVMsRUFBRTtRQUNiLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLENBQUMsQ0FBQztLQUN0QztTQUFNO1FBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsU0FBUyxDQUFDLFFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2hFO0FBQ0gsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4vLyBQcmltZXIgZWplbXBsby4uLlxyXG4vLyBQcnVlYmEgZGUgZW50b3Juby4gRWwgY2xhc2ljbyBoZWxsbyB3b3JsZC5cclxuXHJcbmNvbnN0IHNNZXNzYWdlID0gJ0hlbGxvIHdvcmxkISEhJ1xyXG5jb25zb2xlLmxvZyhzTWVzc2FnZSlcclxuXHJcbiovXHJcblxyXG4vLyBJbXBvcnRhY2lvbiBkZSBkaWZlcmVudGVzIG9iamV0b3MgZGVzZGUgbGEgTkVNIExpYnJhcnlcclxuaW1wb3J0IHtORU1MaWJyYXJ5LCBOZXR3b3JrVHlwZXMsIFBhc3N3b3JkLCBTaW1wbGVXYWxsZXQsIEFjY291bnRIdHRwLCBBZGRyZXNzLCBNb3NhaWNIdHRwLCBRdWVyeVBhcmFtc30gZnJvbSAnbmVtLWxpYnJhcnknO1xyXG5cclxuLy8gSW1wb3J0YWNpb24gZGUgbW9kdWxvIGNvbiBmdW5jaW9uZXMgdXRpbGVzXHJcbmltcG9ydCB7IHRpbWVTdGFtcFByZXR0eSB9IGZyb20gJy4vcHJpdkZ1bmN0aW9ucyc7XHJcblxyXG4vLyBEaXNwb25pYmlsaXphY2lvbiBkZWwgb2JqZXRvIGZzIChmaWxlIHN5c3RlbSkgZW4gbGEgdmFyaWFibGUgZnNcclxuLy8gTHVlZ28gZXN0YSB2YXJpYWJsZSBub3MgcGVybWl0aXJhIGludGVyYWN0dWFyIGNvbiBlbCBzaXN0ZW1hIGRlXHJcbi8vIGFyY2hpdm9zIGRlbCBzaXN0ZW1hIG9wZXJhdGl2b1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcblxyXG4vLyBDb25maWd1cmFjaW9uIGRlIGxhIHJlZCBkZSBORU0gc29icmUgbGEgcXVlIHF1ZXJlbW9zIHRyYWJhamFyXHJcbk5FTUxpYnJhcnkuYm9vdHN0cmFwKE5ldHdvcmtUeXBlcy5URVNUX05FVCk7XHJcblxyXG4vLyBWYXJpYWJsZSBwYXJhIHJlc2d1YXJkYXIgZWwgcGFzc3dvcmRcclxuY29uc3QgbWlXYWxsZXRQYXNzID0gbmV3IFBhc3N3b3JkKCcwMVByaW1lclRlc3RXYWxsZXQnKTtcclxuLy8gVENHT0lFUEtTTFRYNlQyRU5NVVlUNDNIMlpITUVDSEU2Q1BXRFE2TlxyXG4vLyBUQ0dPSUUtUEtTTFRYLTZUMkVOTS1VWVQ0M0gtMlpITUVDLUhFNkNQVy1EUTZOXHJcblxyXG4vKlxyXG4vLyBTZWd1bmRvIEVqZW1wbG8uLi5cclxuLy8gQ3JlYWNpb24gZGUgdW5hIHdhbGxldC5cclxuXHJcbmNvbnN0IHRzdFdhbGxldCA9IFNpbXBsZVdhbGxldC5jcmVhdGUoJ1dhbGxldCBUZXN0JywgbWlXYWxsZXRQYXNzKTtcclxuY29uc29sZS5sb2coJ0EgY29udGludWFjaW9uIGxhIGluZm9ybWFjaW9uIGRlIGxhIHdhbGxldCBjcmVhZGE6XFxuJyk7XHJcbmNvbnNvbGUubG9nKHRzdFdhbGxldCk7XHJcbmNvbnNvbGUubG9nKCdcXG4nKTtcclxuKi9cclxuXHJcbi8qXHJcbi8vIFRlcmNlciBFamVtcGxvXHJcbi8vIENvbnN1bHRhIGxhcyB0cmFuc2FjY2lvbmVzIGRlIHVuYSBjdWVudGEuXHJcbi8vIE9qbyBjb24gZWwgY29tcG9ydGFtaWVudG8gYXNpbmNyb25vLiBWZXIgcXVlIHN1Y2VkZSBlbnRyZSBsYSBpbXByZXNpb24gZGUgbGFzIHRyYW5zYWNjaW9uZXMgeSBlbCBtZW5zYWplIGRlIGZpbiB5IHNhbGlkYVxyXG5cclxuY29uc3QgbXlBZGRyZXNzID0gbmV3IEFkZHJlc3MoJ1RCSVVRTU9HSFVIN0dONUxNNjJDUTVDSTRKRVhNV1U0NTVJUEhJWVonKTtcclxuXHJcbmNvbnNvbGUubG9nKCc9PT4+UmVhbGl6YW5kbyB1bmEgY29uc3VsdGEgYSBsYSBURVNUTkVULi4uXFxuJylcclxuY29uc3QgYWNjb3VudEh0dHAgPSBuZXcgQWNjb3VudEh0dHAoKTtcclxuXHJcbmFjY291bnRIdHRwLmFsbFRyYW5zYWN0aW9ucyhteUFkZHJlc3MpXHJcbi5zdWJzY3JpYmUoYWxsVHJhbnNhY3Rpb25zID0+IHtcclxuXHRjb25zb2xlLmxvZyhhbGxUcmFuc2FjdGlvbnMpO1xyXG59KTtcclxuXHJcbmNvbnNvbGUubG9nKCdcXG49PT4+VGVybWluYW5kbyB5IHNhbGllbmRvLi4uXFxuJylcclxuXHJcblxyXG4vLyBPdHJvIGVqZW1wbG8uXHJcbi8vIENvbnN1bHRhbmRvIHRvZG9zIGxvcyBtb3NhaWNvcyBkZW50cm8gZGUgdW4gTmFtZVNwYWNlIGRhZG8sIGVuIGVzdGUgY2FzbyBcImRvY3RhXCJcclxuY29uc29sZS5sb2coJz09Pj5SZWFsaXphbmRvIHVuYSBjb25zdWx0YSBzb2JyZSBtb3NhaWNvcy4uLlxcbicpXHJcbmNvbnN0IG1vc2FpY0h0dHAgPSBuZXcgTW9zYWljSHR0cCgpO1xyXG5jb25zdCBuYW1lU3BhY2U9J2RvY3RhJztcclxuXHJcbm1vc2FpY0h0dHAuZ2V0QWxsTW9zYWljc0dpdmVuTmFtZXNwYWNlKG5hbWVTcGFjZSkuc3Vic2NyaWJlKG1vc2FpY0RlZmluaXRpb25zID0+IHtcclxuXHRjb25zb2xlLmxvZyhtb3NhaWNEZWZpbml0aW9ucyk7XHJcbn0pO1xyXG5cclxuY29uc29sZS5sb2coJ1xcbj09Pj5UZXJtaW5hbmRvIHkgc2FsaWVuZG8uLi5cXG4nKVxyXG4qL1xyXG5cclxuLy8gVmFyaWFibGUgZG9uZGUgc2UgYWxtYWNlbmEgbGEgcnV0YSBkb25kZSBzZSB2YSBhIGVzY3JpYmlyIGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0IGNyZWFkYS5cclxuY29uc3QgcnV0YVdhbGxldCA9ICdDOlxcXFxfQ3Vyc29cXFxcQ3J5cHRvUHJvamVjdHNcXFxcYmluJztcclxuLy8gVmFyaWFibGUgcXVlIHJlZ2lzdHJhIGVsIG5vbWJyZSBkZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQgYSBndWFyZGFyXHJcbmNvbnN0IG5vbWJyZVdhbGxldEZpbGUgPSAnbWlXYWxsZXQud2x0JztcclxubGV0IGZ1bGxGaWxlV2FsbGV0UGF0aCA9IGAke3J1dGFXYWxsZXR9XFxcXCR7bm9tYnJlV2FsbGV0RmlsZX1gO1xyXG5jb25zdCB0aW1lc3RhbXAgPSB0aW1lU3RhbXBQcmV0dHkoKTtcclxuXHJcbi8qXHJcbi8vIEN1YXJ0byBFamVtcGxvXHJcbi8vIFNhbHZhciBlbiBkaXNjbyB1bmEgd2FsbGV0XHJcblxyXG5jb25zb2xlLmxvZygnPT0+PlNhbHZhbmRvIGxhIHdhbGxldC4uLlxcbicpXHJcblxyXG4vL1NlIHZlcmlmaWNhIHNpIHlhIGV4aXN0ZSB1bmEgd2FsbGV0XHJcbmlmIChmcy5leGlzdHNTeW5jKGZ1bGxGaWxlV2FsbGV0UGF0aCkpe1xyXG5cdC8vIFNlIGV4aXN0ZSB1biBhcmNoaXZvIGRlIHdhbGxldCwgc2UgY2FtYmlhIGVsIG5vbWJyZSB1c2FuZG8gdW4gdGltZXN0YW1wXHJcblx0ZnVsbEZpbGVXYWxsZXRQYXRoID0gYCR7cnV0YVdhbGxldH1cXFxcJHt0aW1lc3RhbXB9XyR7bm9tYnJlV2FsbGV0RmlsZX1gO1xyXG59O1xyXG5cclxuLy8gU2UgcGFzYSBsYSB3YWxsZXQgZGUgTkVNIGEgdW4gc3RyaW5nIHVlIGx1ZWdvIHB1ZWRlIHNlciBcImJhamFkb1wiIGEgZGlzY29cclxuY29uc3Qgd2FsbGV0U3RyaW5nID0gdHN0V2FsbGV0LndyaXRlV0xURmlsZSgpO1xyXG5cclxuLy8gTGEgc2lndWllbnRlIGxpbmVhIGVzIGxhIHF1ZSBcImJhamEgYSBkaXNjb1wiIGVsIFwic3RyaW5nXCIgZGUgbGEgd2FsbGV0IGRlIE5FTSBjcmVhZGFcclxuZnMud3JpdGVGaWxlU3luYyhmdWxsRmlsZVdhbGxldFBhdGgsIHdhbGxldFN0cmluZyk7XHJcbmNvbnNvbGUubG9nKGBcXG49PT4+TGEgd2FsbGV0IHNlIGd1YXJkbyBleGl0b3NhbWVudGUgZW46ICR7ZnVsbEZpbGVXYWxsZXRQYXRofVxcbmApO1xyXG5cclxuLy8gLy8gRXNjcmliaWVuZG8gZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQsIHBlcm8gZXN0YSB2ZXogZGUgZm9ybWEgYXNpbmNyb25hLlxyXG4vLyBmcy53cml0ZUZpbGUoYCR7ZnVsbEZpbGVXYWxsZXRQYXRofWAsIHdhbGxldFN0cmluZywgKGVycikgPT4ge1xyXG4vLyAgICAgLy8gU2kgbGEgZXNjcml0dXJhIGRlIGxhIHdhbGxldCBkYSBlcnJvciwgc2UgY2FwdHVyYSBlbCBlcnJvclxyXG4vLyAgICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG4vL1xyXG4vLyAgICAgLy8gc2kgdmEgdG9kbyBiaWVuLCBzZSBkYSB1biBtZW5zYWplIGRlIGV4aXRvXHJcbi8vICAgICBjb25zb2xlLmxvZyhgXFxuPT0+PkxhIHdhbGxldCBzZSBndWFyZG8gZXhpdG9zYW1lbnRlIGVuOiAke3J1dGFXYWxsZXR9JHtub21icmVXYWxsZXRGaWxlfVxcbmApXHJcbi8vIH0pO1xyXG4qL1xyXG5cclxuLypcclxuLy8gUXVpbnRvIEVqZW1wbG9cclxuLy8gTGV5ZW5kbyB1bmEgd2FsbGV0IGRlc2RlIGVsIGRpc2NvXHJcbiovXHJcblxyXG4vLyBMZXllbmRvIGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0Li4uXHJcbmNvbnNvbGUubG9nKCdDYXJnYW5kbyBlbCBjb250ZW5pZG8gZGVsIGFyY2hpdm8gKGVuIGNydWRvKSBkZSBsYSB3YWxsZXQgZW4gdW5hIHZhcmlhYmxlXFxuJyk7XHJcbmNvbnN0IHRtcFN0ck1pV2FsbGV0ID0gZnMucmVhZEZpbGVTeW5jKGAke2Z1bGxGaWxlV2FsbGV0UGF0aH1gLCAndXRmOCcpO1xyXG5jb25zb2xlLmxvZygnXFxuRWwgYXJjaGl2byBcInB1cm9cIiBkZSBsYSB3YWxsZXQgY29udGllbmU6XFxuJyk7XHJcbmNvbnNvbGUubG9nKHRtcFN0ck1pV2FsbGV0KTtcclxuY29uc29sZS5sb2coJ1xcbicpO1xyXG5cclxuXHJcbi8vIFNpIGxhIHdhbGxldCBhIGxlZXIgZnVlIGNyZWFkYSBkZSBtYW5lcmEgc2VuY2lsbGEsIGVzIGRlY2lyLCBzaW4gdXNhciBsYSBcIk5hbm8gV2FsbGV0XCIuXHJcbmNvbnN0IG1pV2FsbGV0ID0gU2ltcGxlV2FsbGV0LnJlYWRGcm9tV0xUKHRtcFN0ck1pV2FsbGV0KTtcclxuXHJcbi8vIFNpIGxhIHdhbGxldCBhIGxlZXIgZnVlIGNyZWFkYSBjb24gbGEgXCJOYW5vIFdhbGxsZXRcIlxyXG4vL2NvbnN0IG1pV2FsbGV0ID0gU2ltcGxlV2FsbGV0LnJlYWRGcm9tTmFub1dhbGxldFdMRih0bXBTdHJNaVdhbGxldCk7XHJcblxyXG5jb25zb2xlLmxvZygnXFxuRWwgY29udGVuaWRvIGRlIGxhIHdhbGxldCBzZWd1biBORU0gZXM6XFxuJyk7XHJcbmNvbnNvbGUubG9nKG1pV2FsbGV0KTtcclxuY29uc29sZS5sb2coJ1xcbicpO1xyXG5cclxuY29uc29sZS5sb2coJ1xcbkFicmllbmRvIGxhIHdhbGxldCBwYXJhIHZlciBsYSBpbmZvcm1hY2lvbiBkZXRhbGxhZGEgZGUgbGEgbWlzbWE6XFxuJyk7XHJcbmNvbnN0IG1pQ3VlbnRhID0gbWlXYWxsZXQub3BlbihtaVdhbGxldFBhc3MpO1xyXG5jb25zb2xlLmxvZygnXFxuTGEgaW5mb3JtYWNpb24gZGUgbGEgY3VlbnRhIGNvbnRlbmlkYSBlbiBsYSB3YWxsZXQgZXM6XFxuJyk7XHJcbmNvbnNvbGUubG9nKG1pQ3VlbnRhKTtcclxuY29uc29sZS5sb2coJ1xcbicpO1xyXG5cclxuXHJcbi8vIEV4dHJhZSBsYSBhZGRyZXNzIG8gZGlyZWNjaW9uIGRlIGxhIHdhbGxldC5cclxuLy8gTGEgYWRkcmVzcyBzZSBwdWVkZSBleHRyYWVyIGRlIGxhIG1pc21hIHdhbGxldCBvIGRlIGxhIGN1ZW50YVxyXG5jb25zdCBteUFkZHJlc3MgPSBtaVdhbGxldC5hZGRyZXNzO1xyXG5jb25zb2xlLmxvZygnTGEgYWRkcmVzcyBvIGRpcmVjY2lvbiBkZSBsYSBjdWVudGEgY29udGVuaWRhIGVuIGxhIHdhbGxldCBlczpcXG4nKTtcclxuY29uc29sZS5sb2cobXlBZGRyZXNzLnByZXR0eSgpKTtcclxuY29uc29sZS5sb2coJ1xcbicpO1xyXG5cclxuXHJcbi8qXHJcbi8vIFNleHRvIEVqZW1wbG9cclxuLy8gRW52aWFyIHRva2VuXHJcblxyXG4vLyBDcmVhIHVuYSB0cmFzbnNhY2Npb25cclxuY29uc3QgdHJhbnNhY3Rpb25IdHRwID0gbmV3IFRyYW5zYWN0aW9uSHR0cCgpO1xyXG5cclxuLy8gU2UgZ3VhcmRhIGVuIHVuYSB2YXJpYWJsZSB0ZW1wb3JhbCBsYSBjbGF2ZSBwcml2YWRhIGRlIHF1aWVuIGVudmlhXHJcbi8vIExvIGludGVyZXNhbnRlIHNlcmlhIGFicmlyIGxhIHdhbGxldCwgc2FjYXIgbGEgZGF0YSB5IGNvbiBlc3RhIGRhdGEgZmlybWFyIGxhIHRyYW5zYWNjaW9uLlxyXG4vL2NvbnN0IHByaXZhdGVLZXk6IHN0cmluZyA9IHByb2Nlc3MuZW52LlBSSVZBVEVfS0VZO1xyXG5jb25zdCBwcml2YXRlS2V5OiBzdHJpbmcgPSBcIjM5YmVkMGEyYWEyN2FlZWRkNzM3NDc4OGNjZWZhNjQ0ZDc4YzI1ZjhjYjFlMDZiNjA4MGM5NmFkZjZiMzJjYWFcIjtcclxuXHJcbi8vIENyZWEgdW5hIGN1ZW50YSBjb24gbGEgY2xhdmUgcHJpdmFkYS5cclxuY29uc3QgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlV2l0aFByaXZhdGVLZXkocHJpdmF0ZUtleSk7XHJcblxyXG4vL2NvbnN0IHRyYW5zZmVyVHJhbnNhY3Rpb24gPSBUcmFuc2ZlclRyYW5zYWN0aW9uLmNyZWF0ZShcclxuLy8gICAgVGltZVdpbmRvdy5jcmVhdGVXaXRoRGVhZGxpbmUoKSxcclxuLy8gICAgbmV3IEFkZHJlc3MoXCJUQVNFQlItRTNPWUtaLURDNVhLQS1RTEFJWFgtSUxMTEhCLVFSTlNGUi1NU0pQXCIpLFxyXG4vLyAgICBuZXcgWEVNKDApLFxyXG4vLyAgICBQbGFpbk1lc3NhZ2UuY3JlYXRlKFwiQSB2ZXIgc2kgbGxlZ2EgZWwgbWVuc2FqZS4uLlwiKVxyXG4vLyk7XHJcblxyXG4vLyBDcmVhIHVuYSB0cmFuc2FjY2lvbiB5IGxhIGVudmlhLi4uXHJcbmNvbnN0IHRyYW5zZmVyVHJhbnNhY3Rpb24gPSBUcmFuc2ZlclRyYW5zYWN0aW9uLmNyZWF0ZShcclxuICAgIFRpbWVXaW5kb3cuY3JlYXRlV2l0aERlYWRsaW5lKCksXHJcbiAgICBuZXcgQWRkcmVzcyhcIlREVTdMSkZGNVNaNlJBM1dPUE41NEhNTlIyUUxPNVhJM1dEVk5JSDNcIiksXHJcbiAgICBuZXcgWEVNKDUpLFxyXG4gICAgUGxhaW5NZXNzYWdlLmNyZWF0ZShcIlByb2dyYW1hbmRvIGVuIGVsIEFjY2VsZXJhdG9yIEJsb2NrY2hhaW4hISFcIilcclxuKTtcclxuXHJcbmNvbnN0IHNpZ25lZFRyYW5zYWN0aW9uID0gYWNjb3VudC5zaWduVHJhbnNhY3Rpb24odHJhbnNmZXJUcmFuc2FjdGlvbik7XHJcblxyXG5jb25zb2xlLmxvZyhzaWduZWRUcmFuc2FjdGlvbik7XHJcblxyXG50cmFuc2FjdGlvbkh0dHAuYW5ub3VuY2VUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbikuc3Vic2NyaWJlKHggPT4gY29uc29sZS5sb2coeCkpO1xyXG4qL1xyXG5cclxuLypcclxuLy8gU2VwdGltbyBFamVtcGxvXHJcbi8vIFJldmlzYXIgYmFsYW5jZXNcclxuKi9cclxuXHJcbi8vIFJldmlzYXIgYmFsYW5jZSBkZSBYRU1cclxuLy8gUmV2aXNhciBibGFuY2VzIGRlIE1PU0FJQ3NcclxuLy8gQzpcXF9DdXJzb1xcdGVtcFxcRG9jdGFCS1BcXERvY3RhV2FsbGV0LndsdFxyXG5cclxuY29uc3QgbXlBY2NvdW50ID0gbmV3IEFjY291bnRIdHRwKCk7XHJcbm15QWNjb3VudC5nZXRNb3NhaWNPd25lZEJ5QWRkcmVzcyhteUFkZHJlc3MpLnN1YnNjcmliZShtb3NhaWNzID0+IHtcclxuICBjb25zdCB4ZW1Nb3NhaWMgPSBtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xyXG5cdFx0cmV0dXJuIG1vc2FpYy5tb3NhaWNJZC5uYW1lID09PSAneGVtJztcclxuXHR9KTtcclxuXHRpZiAoIXhlbU1vc2FpYykge1xyXG4gICAgY29uc29sZS5sb2coJ0xhIGNhbnRpZGFkIFhFTSBlczogMCcpO1xyXG4gIH0gZWxzZSB7XHJcblx0ICAgY29uc29sZS5sb2coYExhIGNhbnRpZGFkIFhFTSBlczogJHt4ZW1Nb3NhaWMucXVhbnRpdHkgLyAxZTZ9YCk7XHJcbiAgfVxyXG59KTtcclxuXHJcbi8vY29uc3QgbWlCYWxhbmNlWEVNID0gbWlBZFxyXG4iXX0=