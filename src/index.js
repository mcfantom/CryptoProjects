"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
const myAddress = miWallet.address;
console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
console.log(myAddress.pretty());
console.log('A ver si se puede obtener un mosaico transferible...');
const pipi = new nem_library_1.MosaicId('docta_test', 'doctatst');
const caca = new nem_library_1.MosaicHttp();
caca.getMosaicTransferableWithAbsoluteAmount(pipi, 1).subscribe(mmtransferable => {
    console.log(`Algo...: ${mmtransferable.properties.divisibility.toString()}`);
});
const searchMosaic = (address) => {
    return new Promise((resolve, reject) => {
        console.log(`Buscando mosaico en la direccion: ${address.pretty()}`);
        const myAccount = new nem_library_1.AccountHttp();
        myAccount.getMosaicOwnedByAddress(address).subscribe(mosaics => {
            try {
                resolve(mosaics.find((mosaic) => {
                    return mosaic.mosaicId.name === 'doctatst';
                }));
            }
            catch (err) {
                console.log(`${err}`);
                console.log('Please try again');
                reject();
            }
            ;
        });
    });
};
const imprimeMosaico = () => __awaiter(this, void 0, void 0, function* () {
    const pp = yield searchMosaic(myAddress);
    console.log('Hola xyz');
    console.log(`El mosaico encontrado es: ${pp.mosaicId.name}`);
});
imprimeMosaico();
//# sourceMappingURL=data:application/json;base64,