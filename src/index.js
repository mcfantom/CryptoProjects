"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
console.log('\nEl archivo "puro" de la wallet contiene:\n');
console.log(tmpStrMiWallet);
console.log('\n');
const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
console.log('\nEl contenido de la wallet segun NEM es:\n');
console.log(miWallet);
console.log('\n');
console.log('\nAbriendo la wallet para ver la informacion detallada de la misma:\n');
const miCuenta = miWallet.open(miWalletPass);
console.log('\nLa informacion de la cuenta contenida en la wallet es:\n');
console.log(miCuenta);
console.log('\n');
const myAddress = miWallet.address;
console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
console.log(myAddress.pretty());
console.log('\n');
//# sourceMappingURL=data:application/json;base64,