"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
const transferTransaction = nem_library_1.TransferTransaction.create(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address("TASEBRE3OYKZDC5XKAQLAIXXILLLHBQRNSFRMSJP"), new nem_library_1.XEM(1), nem_library_1.PlainMessage.create("Programando con NEM Blockchain en Santiago!!!"));
let NodoNEM = { protocol: 'https', domain: 'nistest.opening-line.jp', port: 7891 };
const transactionHttp = new nem_library_1.TransactionHttp([NodoNEM]);
const privateKey = "c4c40504fded0288455b2dbb02ad47ffba0dbab31a882251391a454905857b9c";
const account = nem_library_1.Account.createWithPrivateKey(privateKey);
const signedTransaction = account.signTransaction(transferTransaction);
console.log(signedTransaction);
transactionHttp.announceTransaction(signedTransaction).subscribe(x => {
    console.log(x);
});
//# sourceMappingURL=data:application/json;base64,