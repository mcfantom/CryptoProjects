"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const NodoNEM = { protocol: 'https', domain: 'nistest.opening-line.jp', port: 7891 };
const privateKey = "c4c40504fded0288455b2dbb02ad47ffba0dbab31a882251391a454905857b9c";
const destinationAddress = 'TASEBRE3OYKZDC5XKAQLAIXXILLLHBQRNSFRMSJP';
const amountToSend = 1;
const transferMessage = 'Programando con NEM Blockchain en Santiago!!!';
const transferTransaction = nem_library_1.TransferTransaction.create(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address(destinationAddress), new nem_library_1.XEM(amountToSend), nem_library_1.PlainMessage.create(transferMessage));
const transactionHttp = new nem_library_1.TransactionHttp([NodoNEM]);
const account = nem_library_1.Account.createWithPrivateKey(privateKey);
const signedTransaction = account.signTransaction(transferTransaction);
console.log(signedTransaction);
transactionHttp.announceTransaction(signedTransaction).subscribe(x => {
    console.log(x);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZGluZ1hFTS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlbmRpbmdYRU0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNEo7QUFRNUosd0JBQVUsQ0FBQyxTQUFTLENBQUMsMEJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUc1QyxNQUFNLE9BQU8sR0FBaUIsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7QUFJakcsTUFBTSxVQUFVLEdBQVcsa0VBQWtFLENBQUM7QUFFOUYsTUFBTSxrQkFBa0IsR0FBRywwQ0FBMEMsQ0FBQztBQUN0RSxNQUFNLFlBQVksR0FBRyxDQUFDLENBQUM7QUFDdkIsTUFBTSxlQUFlLEdBQUcsK0NBQStDLENBQUM7QUFLeEUsTUFBTSxtQkFBbUIsR0FBRyxpQ0FBbUIsQ0FBQyxNQUFNLENBQ2xELHdCQUFVLENBQUMsa0JBQWtCLEVBQUUsRUFDL0IsSUFBSSxxQkFBTyxDQUFDLGtCQUFrQixDQUFDLEVBQy9CLElBQUksaUJBQUcsQ0FBQyxZQUFZLENBQUMsRUFDckIsMEJBQVksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQ3ZDLENBQUM7QUFHRixNQUFNLGVBQWUsR0FBRyxJQUFJLDZCQUFlLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBR3ZELE1BQU0sT0FBTyxHQUFHLHFCQUFPLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7QUFHekQsTUFBTSxpQkFBaUIsR0FBRyxPQUFPLENBQUMsZUFBZSxDQUFDLG1CQUFtQixDQUFDLENBQUM7QUFFdkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRy9CLGVBQWUsQ0FBQyxtQkFBbUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRTtJQUNuRSxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFBO0FBQ2hCLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTkVNTGlicmFyeSwgTmV0d29ya1R5cGVzLCBUcmFuc2ZlclRyYW5zYWN0aW9uLCBUaW1lV2luZG93LCBBZGRyZXNzLCBYRU0sIFBsYWluTWVzc2FnZSwgU2VydmVyQ29uZmlnLCBUcmFuc2FjdGlvbkh0dHAsIEFjY291bnQgfSBmcm9tIFwibmVtLWxpYnJhcnlcIjtcclxuXHJcbi8qXHJcbi8vIFNleHRvIEVqZW1wbG8gT0tcclxuLy8gRW52aWFyIFhFTSAodHJhbnNhY2Npb25lcyBjb24gWEVNKVxyXG4qL1xyXG5cclxuLy8gQ29uZmlndXJhY2lvbiBkZSBsYSByZWQgZGUgTkVNIHNvYnJlIGxhIHF1ZSBxdWVyZW1vcyB0cmFiYWphclxyXG5ORU1MaWJyYXJ5LmJvb3RzdHJhcChOZXR3b3JrVHlwZXMuVEVTVF9ORVQpO1xyXG5cclxuLy8gRW4gZXN0ZSBjYXNvIHNlIGNvbmZpZ3VyYSB1biBOT0RPIE5FTSBwYXJhIHNhbGlyIGVzcGVjaWZpY2FtZW50ZSBwb3IgZXN0ZSBub2RvIHkgbm8gcG9yIGVsIHByaW1lcm8gcXVlIHNlIGVuY3VlbnRyZVxyXG5jb25zdCBOb2RvTkVNID0gPFNlcnZlckNvbmZpZz57cHJvdG9jb2w6ICdodHRwcycsIGRvbWFpbjogJ25pc3Rlc3Qub3BlbmluZy1saW5lLmpwJywgcG9ydDogNzg5MX07XHJcblxyXG4vLyBTZSBndWFyZGEgZW4gdW5hIHZhcmlhYmxlIHRlbXBvcmFsIGxhIGNsYXZlIHByaXZhZGEgZGUgcXVpZW4gZW52aWFcclxuLy8gTG8gaW50ZXJlc2FudGUgc2VyaWEgYWJyaXIgbGEgd2FsbGV0LCBzYWNhciBsYSBkYXRhIHkgY29uIGVzdGEgZGF0YSBmaXJtYXIgbGEgdHJhbnNhY2Npb24uXHJcbmNvbnN0IHByaXZhdGVLZXk6IHN0cmluZyA9IFwiYzRjNDA1MDRmZGVkMDI4ODQ1NWIyZGJiMDJhZDQ3ZmZiYTBkYmFiMzFhODgyMjUxMzkxYTQ1NDkwNTg1N2I5Y1wiO1xyXG5cclxuY29uc3QgZGVzdGluYXRpb25BZGRyZXNzID0gJ1RBU0VCUkUzT1lLWkRDNVhLQVFMQUlYWElMTExIQlFSTlNGUk1TSlAnO1xyXG5jb25zdCBhbW91bnRUb1NlbmQgPSAxO1xyXG5jb25zdCB0cmFuc2Zlck1lc3NhZ2UgPSAnUHJvZ3JhbWFuZG8gY29uIE5FTSBCbG9ja2NoYWluIGVuIFNhbnRpYWdvISEhJztcclxuXHJcbi8vIHN3aXRjaCB0byBub2RlIG5pc3Rlc3Qub3BlbmluZy1saW5lLmpwLiBJdCB1c2VzIGRpZmZlcmVudCBjb25maWd1cmF0aW9uIHNvIHNob3VsZCBhbGxvdyB3cm9uZyB0aW1lc3RhbXAuXHJcbi8vIGNoYW5nZSB5b3VyIGxvY2FsIHRpbWUgLTMwc2VjXHJcbi8vIENyZWEgdW5hIHRyYW5zYWNjaW9uIGNvbiBzdXMgZGF0b3MuXHJcbmNvbnN0IHRyYW5zZmVyVHJhbnNhY3Rpb24gPSBUcmFuc2ZlclRyYW5zYWN0aW9uLmNyZWF0ZShcclxuICAgIFRpbWVXaW5kb3cuY3JlYXRlV2l0aERlYWRsaW5lKCksXHJcbiAgICBuZXcgQWRkcmVzcyhkZXN0aW5hdGlvbkFkZHJlc3MpLFxyXG4gICAgbmV3IFhFTShhbW91bnRUb1NlbmQpLFxyXG4gICAgUGxhaW5NZXNzYWdlLmNyZWF0ZSh0cmFuc2Zlck1lc3NhZ2UpXHJcbik7XHJcblxyXG4vLyBDcmVhIHVuYSBjb25leGlvbiBIVFRQIHBhcmEgZW52aWFyIGxhIHRyeCBsdWVnb1xyXG5jb25zdCB0cmFuc2FjdGlvbkh0dHAgPSBuZXcgVHJhbnNhY3Rpb25IdHRwKFtOb2RvTkVNXSk7XHJcblxyXG4vLyBDcmVhIHVuYSBjdWVudGEgY29uIGxhIGNsYXZlIHByaXZhZGEuXHJcbmNvbnN0IGFjY291bnQgPSBBY2NvdW50LmNyZWF0ZVdpdGhQcml2YXRlS2V5KHByaXZhdGVLZXkpO1xyXG5cclxuLy8gU2UgZmlybWEgbGEgdHJhbnNhY2Npb24gYW50ZXMgZGUgc3UgZW52aW8uXHJcbmNvbnN0IHNpZ25lZFRyYW5zYWN0aW9uID0gYWNjb3VudC5zaWduVHJhbnNhY3Rpb24odHJhbnNmZXJUcmFuc2FjdGlvbik7XHJcblxyXG5jb25zb2xlLmxvZyhzaWduZWRUcmFuc2FjdGlvbik7XHJcblxyXG4vLyBDdWFuZG8gc2UgYW51bmNpYSBsYSB0cmFuc2FjY2lvbiBlcyBjdWFuZG8gcmVhbG1lbnRlIHNlIGxhIGVudmlhIGEgbGEgYmxvY2tjaGFpbi5cclxudHJhbnNhY3Rpb25IdHRwLmFubm91bmNlVHJhbnNhY3Rpb24oc2lnbmVkVHJhbnNhY3Rpb24pLnN1YnNjcmliZSh4ID0+IHtcclxuICBjb25zb2xlLmxvZyh4KVxyXG59KTtcclxuIl19