"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const NodoNEM = { protocol: 'https', domain: 'nistest.opening-line.jp', port: 7891 };
const myMosaicId = new nem_library_1.MosaicId('docta_test', 'doctatst');
const myMosaicHTTP = new nem_library_1.MosaicHttp();
const transactionHttp = new nem_library_1.TransactionHttp([NodoNEM]);
const privateKey = "c4c40504fded0288455b2dbb02ad47ffba0dbab31a882251391a454905857b9c";
const account = nem_library_1.Account.createWithPrivateKey(privateKey);
const destinationAddress = 'TASEBRE3OYKZDC5XKAQLAIXXILLLHBQRNSFRMSJP';
const myMosaicMultiplier = 1e6;
const myMosaicMonto = 1 * myMosaicMultiplier;
const transferMessage = 'Programando con NEM Blockchain en Santiago!!!';
myMosaicHTTP.getMosaicTransferableWithAbsoluteAmount(myMosaicId, myMosaicMonto).subscribe(transferable => {
    let transferTransaction = nem_library_1.TransferTransaction.createWithMosaics(nem_library_1.TimeWindow.createWithDeadline(), new nem_library_1.Address(destinationAddress), [transferable], nem_library_1.PlainMessage.create(transferMessage));
    const signedTransaction = account.signTransaction(transferTransaction);
    transactionHttp.announceTransaction(signedTransaction).subscribe(x => console.log(x));
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VuZGluZ01PU0FJQy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInNlbmRpbmdNT1NBSUMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBNks7QUFTN0ssd0JBQVUsQ0FBQyxTQUFTLENBQUMsMEJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUc1QyxNQUFNLE9BQU8sR0FBaUIsRUFBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSx5QkFBeUIsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFDLENBQUM7QUFnQmpHLE1BQU0sVUFBVSxHQUFHLElBQUksc0JBQVEsQ0FBQyxZQUFZLEVBQUUsVUFBVSxDQUFDLENBQUM7QUFDMUQsTUFBTSxZQUFZLEdBQUcsSUFBSSx3QkFBVSxFQUFFLENBQUM7QUFHdEMsTUFBTSxlQUFlLEdBQUcsSUFBSSw2QkFBZSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUd2RCxNQUFNLFVBQVUsR0FBVyxrRUFBa0UsQ0FBQztBQUc5RixNQUFNLE9BQU8sR0FBRyxxQkFBTyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3pELE1BQU0sa0JBQWtCLEdBQUcsMENBQTBDLENBQUM7QUFNdEUsTUFBTSxrQkFBa0IsR0FBRyxHQUFHLENBQUM7QUFDL0IsTUFBTSxhQUFhLEdBQUcsQ0FBQyxHQUFHLGtCQUFrQixDQUFDO0FBQzdDLE1BQU0sZUFBZSxHQUFHLCtDQUErQyxDQUFDO0FBTXhFLFlBQVksQ0FBQyx1Q0FBdUMsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUMsU0FBUyxDQUFFLFlBQVksQ0FBQyxFQUFFO0lBQ3hHLElBQUksbUJBQW1CLEdBQUcsaUNBQW1CLENBQUMsaUJBQWlCLENBQ25DLHdCQUFVLENBQUMsa0JBQWtCLEVBQUUsRUFDcEMsSUFBSSxxQkFBTyxDQUFDLGtCQUFrQixDQUFDLEVBQy9CLENBQUMsWUFBWSxDQUFDLEVBQ2QsMEJBQVksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUU3RCxNQUFNLGlCQUFpQixHQUFHLE9BQU8sQ0FBQyxlQUFlLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUN2RSxlQUFlLENBQUMsbUJBQW1CLENBQUMsaUJBQWlCLENBQUMsQ0FBQyxTQUFTLENBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDekYsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBORU1MaWJyYXJ5LCBOZXR3b3JrVHlwZXMsIFNlcnZlckNvbmZpZywgTW9zYWljSWQsIE1vc2FpY0h0dHAsIFRyYW5zYWN0aW9uSHR0cCwgQWNjb3VudCwgVHJhbnNmZXJUcmFuc2FjdGlvbiwgVGltZVdpbmRvdywgQWRkcmVzcywgUGxhaW5NZXNzYWdlIH0gZnJvbSBcIm5lbS1saWJyYXJ5XCI7XHJcblxyXG5cclxuLypcclxuLy8gT2N0YXZvIEVqZW1wbG9cclxuLy8gSGFjZXIgdHJhbnNhY2Npb25lcyBjb24gbW9zYWljb3NcclxuKi9cclxuXHJcbi8vIENvbmZpZ3VyYWNpb24gZGUgbGEgcmVkIGRlIE5FTSBzb2JyZSBsYSBxdWUgcXVlcmVtb3MgdHJhYmFqYXJcclxuTkVNTGlicmFyeS5ib290c3RyYXAoTmV0d29ya1R5cGVzLlRFU1RfTkVUKTtcclxuXHJcbi8vIEVuIGVzdGUgY2FzbyBzZSBjb25maWd1cmEgdW4gTk9ETyBORU0gcGFyYSBzYWxpciBlc3BlY2lmaWNhbWVudGUgcG9yIGVzdGUgbm9kbyB5IG5vIHBvciBlbCBwcmltZXJvIHF1ZSBzZSBlbmN1ZW50cmVcclxuY29uc3QgTm9kb05FTSA9IDxTZXJ2ZXJDb25maWc+e3Byb3RvY29sOiAnaHR0cHMnLCBkb21haW46ICduaXN0ZXN0Lm9wZW5pbmctbGluZS5qcCcsIHBvcnQ6IDc4OTF9O1xyXG5cclxuXHJcbi8vIERldiBBY2NvdW50XHJcbi8vIEFjY291bnQge1xyXG4vLyAgIGFkZHJlc3M6IEFkZHJlc3Mge1xyXG4vLyAgICAgdmFsdWU6ICdUQ0dPSUVQS1NMVFg2VDJFTk1VWVQ0M0gyWkhNRUNIRTZDUFdEUTZOJyxcclxuLy8gICAgIG5ldHdvcmtUeXBlOiAxNTJcclxuLy8gICB9LFxyXG4vLyAgIHB1YmxpY0tleTogJzk1MGM4Yzk5MzA5ZDYyNDgxZDI3ZWU2NzM2MTJkMmY5YzY2OTZiNTk2MjEzODRmYTdmNDYxZjE3NmZmZmI1OWQnLFxyXG4vLyAgIHByaXZhdGVLZXk6ICdjNGM0MDUwNGZkZWQwMjg4NDU1YjJkYmIwMmFkNDdmZmJhMGRiYWIzMWE4ODIyNTEzOTFhNDU0OTA1ODU3YjljJ1xyXG4vLyB9XHJcbi8vXHJcbi8vIFRBU0VCUkUzT1lLWkRDNVhLQVFMQUlYWElMTExIQlFSTlNGUk1TSlAgPT0+PiBFc3RhIGVzIG1pIG5hbm93YWxsZXQgRG9jdGFcclxuLy9cclxuXHJcbmNvbnN0IG15TW9zYWljSWQgPSBuZXcgTW9zYWljSWQoJ2RvY3RhX3Rlc3QnLCAnZG9jdGF0c3QnKTtcclxuY29uc3QgbXlNb3NhaWNIVFRQID0gbmV3IE1vc2FpY0h0dHAoKTtcclxuXHJcbi8vIENyZWEgdW5hIGNvbmV4aW9uIEhUVFAgcGFyYSBlbnZpYXIgbGEgdHJ4IGx1ZWdvXHJcbmNvbnN0IHRyYW5zYWN0aW9uSHR0cCA9IG5ldyBUcmFuc2FjdGlvbkh0dHAoW05vZG9ORU1dKTtcclxuXHJcbi8vIFNlIGd1YXJkYSBlbiB1bmEgdmFyaWFibGUgdGVtcG9yYWwgbGEgY2xhdmUgcHJpdmFkYSBkZSBxdWllbiBlbnZpYVxyXG5jb25zdCBwcml2YXRlS2V5OiBzdHJpbmcgPSBcImM0YzQwNTA0ZmRlZDAyODg0NTViMmRiYjAyYWQ0N2ZmYmEwZGJhYjMxYTg4MjI1MTM5MWE0NTQ5MDU4NTdiOWNcIjtcclxuXHJcbi8vIENyZWEgdW5hIGN1ZW50YSBjb24gbGEgY2xhdmUgcHJpdmFkYS5cclxuY29uc3QgYWNjb3VudCA9IEFjY291bnQuY3JlYXRlV2l0aFByaXZhdGVLZXkocHJpdmF0ZUtleSk7XHJcbmNvbnN0IGRlc3RpbmF0aW9uQWRkcmVzcyA9ICdUQVNFQlJFM09ZS1pEQzVYS0FRTEFJWFhJTExMSEJRUk5TRlJNU0pQJztcclxuLy8gRWwgbXVsdGlwbGljYWRvciBxdWUgc2UgZGVmaW5lIGEgY29udGludWFjaW9uIGVzIGVuIGJhc2UgYSBsYSBwcm9waWVkYWQgZGUgRGl2aXNpYmlsaXR5IGRlbCBtb3NhaWNvLlxyXG4vLyBTaSBsYSBkaXZpc2l2aWxpZGFkIGVzIDYsIGNvbW8gZW4gZXN0ZSBjYXNvIGRlbCBcImRvY3RhdHN0XCIsIHBhcmEgZW52aWFyIHVuYSB1bmlkYWQgZGVsIG1vc2FpY28gaGF5XHJcbi8vIHF1ZSBtdWx0aXBsaWNhciAxIHBvciAxMDAwMDAwOyBvIGxvIHF1ZSBlcyBsbyBtaXNtbyBlbiBub3RhY2lvbiBjaWVudGlmaWNhIDEqMTBlNiBvXHJcbi8vIDFlNiBlbiBsZW5ndWFqZSBkZSBwcm9ncmFtYWNpb24gdHlwZXNjcmlwdC5cclxuLy8gQ29tbyByZWdsYSByYXBpZGFkIGxhIGNhbnRpZGFkIGRlIGNlcm9zIGVzIGVsIG5ybyBpbmRpY2FkbyBlbiBsYSBkaXZpc2l2aWxpZGFkIGRlbCBtb3NhaWNvXHJcbmNvbnN0IG15TW9zYWljTXVsdGlwbGllciA9IDFlNjtcclxuY29uc3QgbXlNb3NhaWNNb250byA9IDEgKiBteU1vc2FpY011bHRpcGxpZXI7XHJcbmNvbnN0IHRyYW5zZmVyTWVzc2FnZSA9ICdQcm9ncmFtYW5kbyBjb24gTkVNIEJsb2NrY2hhaW4gZW4gU2FudGlhZ28hISEnO1xyXG5cclxuLy8gQWJzb2x1dGUgYW5kIHJlbGF0aXZlIGFtb3VudHNcclxuLy8gTkVNIHdvcmtzIHdpdGggYWJzb2x1dGUgYW1vdW50cywgcmVtb3ZpbmcgdGhlIGNvbW1hIHdoZW4gdGhlIG1vc2FpYyBjYW4gYmUgZGl2aXNpYmxlLiBUbyBnZXQgYW4gYWJzb2x1dGUgYW1vdW50LCBtdWx0aXBseSB0aGUgYW1vdW50IG9mIGFzc2V0cyB5b3Ugd2FudCB0byBjcmVhdGUgb3Igc2VuZCBieSAxMGRpdmlzaWJpbGl0eS5cclxuLy8gRm9yIGV4YW1wbGUsIGlmIHRoZSBtb3NhaWMgaGFzIGRpdmlzaWJpbGl0eSAyLCB0byBjcmVhdGUgb3Igc2VuZCAxMCB1bml0cyAocmVsYXRpdmUpIHlvdSBzaG91bGQgZGVmaW5lIDEwMDAgKGFic29sdXRlKSBpbnN0ZWFkLlxyXG5cclxubXlNb3NhaWNIVFRQLmdldE1vc2FpY1RyYW5zZmVyYWJsZVdpdGhBYnNvbHV0ZUFtb3VudChteU1vc2FpY0lkLCBteU1vc2FpY01vbnRvKS5zdWJzY3JpYmUoIHRyYW5zZmVyYWJsZSA9PiAge1xyXG4gIGxldCB0cmFuc2ZlclRyYW5zYWN0aW9uID0gVHJhbnNmZXJUcmFuc2FjdGlvbi5jcmVhdGVXaXRoTW9zYWljcyhcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVGltZVdpbmRvdy5jcmVhdGVXaXRoRGVhZGxpbmUoKSxcclxuXHRcdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgbmV3IEFkZHJlc3MoZGVzdGluYXRpb25BZGRyZXNzKSxcclxuXHRcdFx0XHRcdCAgICAgICAgICAgICAgICAgICAgW3RyYW5zZmVyYWJsZV0sXHJcblx0XHRcdFx0XHQgICAgICAgICAgICAgICAgICAgIFBsYWluTWVzc2FnZS5jcmVhdGUodHJhbnNmZXJNZXNzYWdlKSk7XHJcbiAgLy8gc2lnbiBhbmQgYnJvYWRjYXN0XHJcbiAgY29uc3Qgc2lnbmVkVHJhbnNhY3Rpb24gPSBhY2NvdW50LnNpZ25UcmFuc2FjdGlvbih0cmFuc2ZlclRyYW5zYWN0aW9uKTtcclxuICB0cmFuc2FjdGlvbkh0dHAuYW5ub3VuY2VUcmFuc2FjdGlvbihzaWduZWRUcmFuc2FjdGlvbikuc3Vic2NyaWJlKCB4ID0+IGNvbnNvbGUubG9nKHgpKTtcclxufSk7XHJcblxyXG5cclxuXHJcbi8vIEZ1bmNpb24gcGFyYSBidXNjYXIgdW4gbW9zYWljbyBlbiB1bmEgd2FsbGV0LlxyXG4vLyBjb25zdCBzZWFyY2hNb3NhaWMgPSAoYWRkcmVzczogQWRkcmVzcyk6IFByb21pc2U8TW9zYWljPiA9PiB7XHJcbi8vIFx0cmV0dXJuIG5ldyBQcm9taXNlPE1vc2FpYz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4vLyBcdFx0Y29uc29sZS5sb2coYEJ1c2NhbmRvIG1vc2FpY28gZW4gbGEgZGlyZWNjaW9uOiAke2FkZHJlc3MucHJldHR5KCl9YCk7XHJcbi8vXHJcbi8vICAgICBjb25zdCBteUFjY291bnQgPSBuZXcgQWNjb3VudEh0dHAoKTtcclxuLy8gICAgIG15QWNjb3VudC5nZXRNb3NhaWNPd25lZEJ5QWRkcmVzcyhhZGRyZXNzKS5zdWJzY3JpYmUobW9zYWljcyA9PiB7XHJcbi8vICAgICAgIHRyeXtcclxuLy8gICAgICAgICByZXNvbHZlKG1vc2FpY3MuZmluZCgobW9zYWljKSA9PiB7XHJcbi8vICAgICAgICAgICByZXR1cm4gbW9zYWljLm1vc2FpY0lkLm5hbWUgPT09ICdkb2N0YXRzdCc7XHJcbi8vICAgICAgICAgfSkpO1xyXG4vLyAgICAgICB9IGNhdGNoKGVycikge1xyXG4vLyAgICAgICAgIGNvbnNvbGUubG9nKGAke2Vycn1gKTtcclxuLy8gICAgIFx0XHRcdGNvbnNvbGUubG9nKCdQbGVhc2UgdHJ5IGFnYWluJyk7XHJcbi8vICAgICBcdFx0XHRyZWplY3QoKTtcclxuLy8gICAgICAgfTtcclxuLy8gICAgIH0pO1xyXG4vLyBcdH0pO1xyXG4vLyB9O1xyXG4vL1xyXG4vLyAvLyBGdW5jaW9uIHBhcmEgaW1wcmltaXIgbGEgaW5mb3JtYWNpb24gZGUgdW4gbW9zYWljby5cclxuLy8gY29uc3QgaW1wcmltZU1vc2FpY28gPSBhc3luYyAoKSA9PiB7XHJcbi8vICAgY29uc3QgcHAgPSBhd2FpdCBzZWFyY2hNb3NhaWMobXlBZGRyZXNzKTtcclxuLy8gICBjb25zb2xlLmxvZygnSG9sYSB4eXonKTtcclxuLy8gICBjb25zb2xlLmxvZyhgRWwgbW9zYWljbyBlbmNvbnRyYWRvIGVzOiAke3BwLm1vc2FpY0lkLm5hbWV9YCk7XHJcbi8vXHJcbi8vIH07XHJcbi8vXHJcbi8vIGltcHJpbWVNb3NhaWNvKCk7XHJcbi8vXHJcbi8vIGNvbnNvbGUubG9nKCdBIHZlciBzaSBzZSBwdWVkZSBvYnRlbmVyIHVuIG1vc2FpY28gdHJhbnNmZXJpYmxlLi4uJyk7XHJcbiJdfQ==