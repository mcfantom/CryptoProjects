"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const fs = require('fs');
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
const myAddress = miWallet.address;
console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
console.log(myAddress.pretty());
const myAccount = new nem_library_1.AccountHttp();
myAccount.getMosaicOwnedByAddress(myAddress).subscribe(mosaics => {
    const xemMosaic = mosaics.find((mosaic) => {
        return mosaic.mosaicId.name === 'xem';
    });
    if (!xemMosaic) {
        console.log('La cantidad XEM es: 0');
    }
    else {
        console.log(`La cantidad XEM es: ${xemMosaic.quantity / 1e6}`);
    }
    ;
    const doctaMosaic = mosaics.find((mosaic) => {
        return mosaic.mosaicId.name === 'doctatst';
    });
    if (!doctaMosaic) {
        console.log('La cantidad doctatst es: 0');
    }
    else {
        console.log(`La cantidad doctatst es: ${doctaMosaic.quantity / 1e6}`);
    }
    ;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0Q2hlY2tCYWxhbmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2FsbGV0Q2hlY2tCYWxhbmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsNkNBQTRGO0FBVzVGLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUd6Qix3QkFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRzVDLE1BQU0sVUFBVSxHQUFHLGlDQUFpQyxDQUFDO0FBRXJELE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0FBQ3hDLElBQUksa0JBQWtCLEdBQUcsR0FBRyxVQUFVLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztBQUc5RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7QUFDM0YsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLGtCQUFrQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7QUFDeEUsTUFBTSxRQUFRLEdBQUcsMEJBQVksQ0FBQyxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDMUQsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztBQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7QUFDaEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUdoQyxNQUFNLFNBQVMsR0FBRyxJQUFJLHlCQUFXLEVBQUUsQ0FBQztBQUNwQyxTQUFTLENBQUMsdUJBQXVCLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFO0lBQy9ELE1BQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsRUFBRTtRQUMxQyxPQUFPLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLEtBQUssQ0FBQztJQUN2QyxDQUFDLENBQUMsQ0FBQztJQUNILElBQUksQ0FBQyxTQUFTLEVBQUU7UUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7S0FDdEM7U0FBTTtRQUNMLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUNoRTtJQUFBLENBQUM7SUFFRixNQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7UUFDMUMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxVQUFVLENBQUM7SUFDN0MsQ0FBQyxDQUFDLENBQUM7SUFDSCxJQUFJLENBQUMsV0FBVyxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQztLQUMzQztTQUFNO1FBQ0osT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsV0FBVyxDQUFDLFFBQVEsR0FBRyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ3hFO0lBQUEsQ0FBQztBQUNKLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTkVNTGlicmFyeSwgTmV0d29ya1R5cGVzLCBBY2NvdW50SHR0cCwgUGFzc3dvcmQsIFNpbXBsZVdhbGxldCB9IGZyb20gXCJuZW0tbGlicmFyeVwiO1xyXG5cclxuLypcclxuLy8gU2VwdGltbyBFamVtcGxvIE9LXHJcbi8vIFJldmlzYXIgYmFsYW5jZSBkZSBYRU1cclxuLy8gUmV2aXNhciBibGFuY2VzIGRlIE1PU0FJQ3NcclxuKi9cclxuXHJcbi8vIERpc3BvbmliaWxpemFjaW9uIGRlbCBvYmpldG8gZnMgKGZpbGUgc3lzdGVtKSBlbiBsYSB2YXJpYWJsZSBmc1xyXG4vLyBMdWVnbyBlc3RhIHZhcmlhYmxlIG5vcyBwZXJtaXRpcmEgaW50ZXJhY3R1YXIgY29uIGVsIHNpc3RlbWEgZGVcclxuLy8gYXJjaGl2b3MgZGVsIHNpc3RlbWEgb3BlcmF0aXZvXHJcbmNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcclxuXHJcbi8vIENvbmZpZ3VyYWNpb24gZGUgbGEgcmVkIGRlIE5FTSBzb2JyZSBsYSBxdWUgcXVlcmVtb3MgdHJhYmFqYXJcclxuTkVNTGlicmFyeS5ib290c3RyYXAoTmV0d29ya1R5cGVzLlRFU1RfTkVUKTtcclxuXHJcbi8vIFZhcmlhYmxlIGRvbmRlIHNlIGFsbWFjZW5hIGxhIHJ1dGEgZG9uZGUgc2UgdmEgYSBlc2NyaWJpciBlbCBhcmNoaXZvIGRlIGxhIHdhbGxldCBjcmVhZGEuXHJcbmNvbnN0IHJ1dGFXYWxsZXQgPSAnQzpcXFxcX0N1cnNvXFxcXENyeXB0b1Byb2plY3RzXFxcXGJpbic7XHJcbi8vIFZhcmlhYmxlIHF1ZSByZWdpc3RyYSBlbCBub21icmUgZGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0IGEgZ3VhcmRhclxyXG5jb25zdCBub21icmVXYWxsZXRGaWxlID0gJ21pV2FsbGV0LndsdCc7XHJcbmxldCBmdWxsRmlsZVdhbGxldFBhdGggPSBgJHtydXRhV2FsbGV0fVxcXFwke25vbWJyZVdhbGxldEZpbGV9YDtcclxuXHJcbi8vIExleWVuZG8gZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQuLi5cclxuY29uc29sZS5sb2coJ0NhcmdhbmRvIGVsIGNvbnRlbmlkbyBkZWwgYXJjaGl2byAoZW4gY3J1ZG8pIGRlIGxhIHdhbGxldCBlbiB1bmEgdmFyaWFibGVcXG4nKTtcclxuY29uc3QgdG1wU3RyTWlXYWxsZXQgPSBmcy5yZWFkRmlsZVN5bmMoYCR7ZnVsbEZpbGVXYWxsZXRQYXRofWAsICd1dGY4Jyk7XHJcbmNvbnN0IG1pV2FsbGV0ID0gU2ltcGxlV2FsbGV0LnJlYWRGcm9tV0xUKHRtcFN0ck1pV2FsbGV0KTtcclxuY29uc3QgbXlBZGRyZXNzID0gbWlXYWxsZXQuYWRkcmVzcztcclxuY29uc29sZS5sb2coJ0xhIGFkZHJlc3MgbyBkaXJlY2Npb24gZGUgbGEgY3VlbnRhIGNvbnRlbmlkYSBlbiBsYSB3YWxsZXQgZXM6XFxuJyk7XHJcbmNvbnNvbGUubG9nKG15QWRkcmVzcy5wcmV0dHkoKSk7XHJcblxyXG5cclxuY29uc3QgbXlBY2NvdW50ID0gbmV3IEFjY291bnRIdHRwKCk7XHJcbm15QWNjb3VudC5nZXRNb3NhaWNPd25lZEJ5QWRkcmVzcyhteUFkZHJlc3MpLnN1YnNjcmliZShtb3NhaWNzID0+IHtcclxuICBjb25zdCB4ZW1Nb3NhaWMgPSBtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xyXG5cdFx0cmV0dXJuIG1vc2FpYy5tb3NhaWNJZC5uYW1lID09PSAneGVtJztcclxuXHR9KTtcclxuXHRpZiAoIXhlbU1vc2FpYykge1xyXG4gICAgY29uc29sZS5sb2coJ0xhIGNhbnRpZGFkIFhFTSBlczogMCcpO1xyXG4gIH0gZWxzZSB7XHJcblx0ICAgY29uc29sZS5sb2coYExhIGNhbnRpZGFkIFhFTSBlczogJHt4ZW1Nb3NhaWMucXVhbnRpdHkgLyAxZTZ9YCk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3QgZG9jdGFNb3NhaWMgPSBtb3NhaWNzLmZpbmQoKG1vc2FpYykgPT4ge1xyXG4gICAgcmV0dXJuIG1vc2FpYy5tb3NhaWNJZC5uYW1lID09PSAnZG9jdGF0c3QnO1xyXG4gIH0pO1xyXG4gIGlmICghZG9jdGFNb3NhaWMpIHtcclxuICAgIGNvbnNvbGUubG9nKCdMYSBjYW50aWRhZCBkb2N0YXRzdCBlczogMCcpO1xyXG4gIH0gZWxzZSB7XHJcbiAgICAgY29uc29sZS5sb2coYExhIGNhbnRpZGFkIGRvY3RhdHN0IGVzOiAke2RvY3RhTW9zYWljLnF1YW50aXR5IC8gMWU2fWApO1xyXG4gIH07XHJcbn0pO1xyXG5cclxuLy8gTGEgY2FudGlkYWQgWEVNIGVzOiA5Ni4zNVxyXG4vLyBMYSBjYW50aWRhZCBkb2N0YXRzdCBlczogMTIzNDU2Ni45OTk5OThcclxuIl19