"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
const privFunctions_1 = require("./privFunctions");
nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
const tstWallet = nem_library_1.SimpleWallet.create('Wallet Test', miWalletPass);
console.log('A continuacion la informacion de la wallet creada:\n');
console.log(tstWallet);
console.log('\n');
const fs = require('fs');
const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
const nombreWalletFile = 'miWallet.wlt';
let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
const timestamp = privFunctions_1.timeStampPretty();
console.log('==>>Salvando la wallet...\n');
if (fs.existsSync(fullFileWalletPath)) {
    fullFileWalletPath = `${rutaWallet}\\${timestamp}_${nombreWalletFile}`;
}
;
const walletString = tstWallet.writeWLTFile();
fs.writeFileSync(fullFileWalletPath, walletString);
console.log(`\n==>>La wallet se guardo exitosamente en: ${fullFileWalletPath}\n`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0Q3JlYXRpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJ3YWxsZXRDcmVhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZDQUErRTtBQUMvRSxtREFBa0Q7QUFHbEQsd0JBQVUsQ0FBQyxTQUFTLENBQUMsMEJBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQVE1QyxNQUFNLFlBQVksR0FBRyxJQUFJLHNCQUFRLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUV4RCxNQUFNLFNBQVMsR0FBRywwQkFBWSxDQUFDLE1BQU0sQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDbkUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO0FBQ3BFLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQVlsQixNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7QUFHekIsTUFBTSxVQUFVLEdBQUcsaUNBQWlDLENBQUM7QUFFckQsTUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUM7QUFDeEMsSUFBSSxrQkFBa0IsR0FBRyxHQUFHLFVBQVUsS0FBSyxnQkFBZ0IsRUFBRSxDQUFDO0FBQzlELE1BQU0sU0FBUyxHQUFHLCtCQUFlLEVBQUUsQ0FBQztBQUdwQyxPQUFPLENBQUMsR0FBRyxDQUFDLDZCQUE2QixDQUFDLENBQUE7QUFHMUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLEVBQUU7SUFFdEMsa0JBQWtCLEdBQUcsR0FBRyxVQUFVLEtBQUssU0FBUyxJQUFJLGdCQUFnQixFQUFFLENBQUM7Q0FDdkU7QUFBQSxDQUFDO0FBR0YsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDLFlBQVksRUFBRSxDQUFDO0FBRzlDLEVBQUUsQ0FBQyxhQUFhLENBQUMsa0JBQWtCLEVBQUUsWUFBWSxDQUFDLENBQUM7QUFDbkQsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsa0JBQWtCLElBQUksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTkVNTGlicmFyeSwgTmV0d29ya1R5cGVzLCBTaW1wbGVXYWxsZXQsIFBhc3N3b3JkIH0gZnJvbSBcIm5lbS1saWJyYXJ5XCI7XHJcbmltcG9ydCB7IHRpbWVTdGFtcFByZXR0eSB9IGZyb20gXCIuL3ByaXZGdW5jdGlvbnNcIjtcclxuXHJcbi8vIENvbmZpZ3VyYWNpb24gZGUgbGEgcmVkIGRlIE5FTSBzb2JyZSBsYSBxdWUgcXVlcmVtb3MgdHJhYmFqYXJcclxuTkVNTGlicmFyeS5ib290c3RyYXAoTmV0d29ya1R5cGVzLlRFU1RfTkVUKTtcclxuXHJcbi8qXHJcbi8vIFNlZ3VuZG8gRWplbXBsbyBPS1xyXG4vLyBDcmVhY2lvbiBkZSB1bmEgd2FsbGV0LlxyXG4qL1xyXG5cclxuLy8gVmFyaWFibGUgcGFyYSByZXNndWFyZGFyIGVsIHBhc3N3b3JkXHJcbmNvbnN0IG1pV2FsbGV0UGFzcyA9IG5ldyBQYXNzd29yZCgnMDFQcmltZXJUZXN0V2FsbGV0Jyk7XHJcblxyXG5jb25zdCB0c3RXYWxsZXQgPSBTaW1wbGVXYWxsZXQuY3JlYXRlKCdXYWxsZXQgVGVzdCcsIG1pV2FsbGV0UGFzcyk7XHJcbmNvbnNvbGUubG9nKCdBIGNvbnRpbnVhY2lvbiBsYSBpbmZvcm1hY2lvbiBkZSBsYSB3YWxsZXQgY3JlYWRhOlxcbicpO1xyXG5jb25zb2xlLmxvZyh0c3RXYWxsZXQpO1xyXG5jb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG5cclxuXHJcbi8qXHJcbi8vIEN1YXJ0byBFamVtcGxvIE9LXHJcbi8vIFNhbHZhciBlbiBkaXNjbyB1bmEgd2FsbGV0XHJcbiovXHJcblxyXG4vLyBEaXNwb25pYmlsaXphY2lvbiBkZWwgb2JqZXRvIGZzIChmaWxlIHN5c3RlbSkgZW4gbGEgdmFyaWFibGUgZnNcclxuLy8gTHVlZ28gZXN0YSB2YXJpYWJsZSBub3MgcGVybWl0aXJhIGludGVyYWN0dWFyIGNvbiBlbCBzaXN0ZW1hIGRlXHJcbi8vIGFyY2hpdm9zIGRlbCBzaXN0ZW1hIG9wZXJhdGl2b1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcblxyXG4vLyBWYXJpYWJsZSBkb25kZSBzZSBhbG1hY2VuYSBsYSBydXRhIGRvbmRlIHNlIHZhIGEgZXNjcmliaXIgZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQgY3JlYWRhLlxyXG5jb25zdCBydXRhV2FsbGV0ID0gJ0M6XFxcXF9DdXJzb1xcXFxDcnlwdG9Qcm9qZWN0c1xcXFxiaW4nO1xyXG4vLyBWYXJpYWJsZSBxdWUgcmVnaXN0cmEgZWwgbm9tYnJlIGRlbCBhcmNoaXZvIGRlIGxhIHdhbGxldCBhIGd1YXJkYXJcclxuY29uc3Qgbm9tYnJlV2FsbGV0RmlsZSA9ICdtaVdhbGxldC53bHQnO1xyXG5sZXQgZnVsbEZpbGVXYWxsZXRQYXRoID0gYCR7cnV0YVdhbGxldH1cXFxcJHtub21icmVXYWxsZXRGaWxlfWA7XHJcbmNvbnN0IHRpbWVzdGFtcCA9IHRpbWVTdGFtcFByZXR0eSgpO1xyXG5cclxuXHJcbmNvbnNvbGUubG9nKCc9PT4+U2FsdmFuZG8gbGEgd2FsbGV0Li4uXFxuJylcclxuXHJcbi8vU2UgdmVyaWZpY2Egc2kgeWEgZXhpc3RlIHVuYSB3YWxsZXRcclxuaWYgKGZzLmV4aXN0c1N5bmMoZnVsbEZpbGVXYWxsZXRQYXRoKSkge1xyXG5cdC8vIFNlIGV4aXN0ZSB1biBhcmNoaXZvIGRlIHdhbGxldCwgc2UgY2FtYmlhIGVsIG5vbWJyZSB1c2FuZG8gdW4gdGltZXN0YW1wXHJcblx0ZnVsbEZpbGVXYWxsZXRQYXRoID0gYCR7cnV0YVdhbGxldH1cXFxcJHt0aW1lc3RhbXB9XyR7bm9tYnJlV2FsbGV0RmlsZX1gO1xyXG59O1xyXG5cclxuLy8gU2UgcGFzYSBsYSB3YWxsZXQgZGUgTkVNIGEgdW4gc3RyaW5nIHVlIGx1ZWdvIHB1ZWRlIHNlciBcImJhamFkb1wiIGEgZGlzY29cclxuY29uc3Qgd2FsbGV0U3RyaW5nID0gdHN0V2FsbGV0LndyaXRlV0xURmlsZSgpO1xyXG5cclxuLy8gTGEgc2lndWllbnRlIGxpbmVhIGVzIGxhIHF1ZSBcImJhamEgYSBkaXNjb1wiIGVsIFwic3RyaW5nXCIgZGUgbGEgd2FsbGV0IGRlIE5FTSBjcmVhZGFcclxuZnMud3JpdGVGaWxlU3luYyhmdWxsRmlsZVdhbGxldFBhdGgsIHdhbGxldFN0cmluZyk7XHJcbmNvbnNvbGUubG9nKGBcXG49PT4+TGEgd2FsbGV0IHNlIGd1YXJkbyBleGl0b3NhbWVudGUgZW46ICR7ZnVsbEZpbGVXYWxsZXRQYXRofVxcbmApO1xyXG5cclxuLypcclxuLy8gRXNjcmliaWVuZG8gZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQsIHBlcm8gZXN0YSB2ZXogZGUgZm9ybWEgYXNpbmNyb25hLlxyXG5mcy53cml0ZUZpbGUoYCR7ZnVsbEZpbGVXYWxsZXRQYXRofWAsIHdhbGxldFN0cmluZywgKGVycikgPT4ge1xyXG4gICAgLy8gU2kgbGEgZXNjcml0dXJhIGRlIGxhIHdhbGxldCBkYSBlcnJvciwgc2UgY2FwdHVyYSBlbCBlcnJvclxyXG4gICAgaWYgKGVycikgdGhyb3cgZXJyO1xyXG5cclxuICAgIC8vIHNpIHZhIHRvZG8gYmllbiwgc2UgZGEgdW4gbWVuc2FqZSBkZSBleGl0b1xyXG4gICAgY29uc29sZS5sb2coYFxcbj09Pj5MYSB3YWxsZXQgc2UgZ3VhcmRvLCBkZSBtYW5lcmEgYXNpbmNyb25hLCBleGl0b3NhbWVudGUgZW46ICR7ZnVsbEZpbGVXYWxsZXRQYXRofVxcbmApXHJcbn0pO1xyXG4qL1xyXG4iXX0=