"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
exports.walletReading = () => {
    const fs = require('fs');
    nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
    const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
    const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
    const nombreWalletFile = 'miWallet.wlt';
    let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
    console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
    const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
    console.log('\nEl archivo "puro" de la wallet contiene:\n');
    console.log(tmpStrMiWallet);
    console.log('\n');
    const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
    console.log('\nEl contenido de la wallet segun NEM es:\n');
    console.log(miWallet);
    console.log('\n');
    console.log('\nAbriendo la wallet para ver la informacion detallada de la misma:\n');
    const miCuenta = miWallet.open(miWalletPass);
    console.log('\nLa informacion de la cuenta contenida en la wallet es:\n');
    console.log(miCuenta);
    console.log('\n');
    const myAddress = miWallet.address;
    console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
    console.log(myAddress.pretty());
    console.log('\n');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0UmVhZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndhbGxldFJlYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBK0U7QUFPbEUsUUFBQSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBS2hDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUd6Qix3QkFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRzVDLE1BQU0sWUFBWSxHQUFHLElBQUksc0JBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBR3hELE1BQU0sVUFBVSxHQUFHLGlDQUFpQyxDQUFDO0lBRXJELE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0lBQ3hDLElBQUksa0JBQWtCLEdBQUcsR0FBRyxVQUFVLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztJQUc5RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7SUFDM0YsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLGtCQUFrQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUlsQixNQUFNLFFBQVEsR0FBRywwQkFBWSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUsxRCxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUVBQXVFLENBQUMsQ0FBQztJQUNyRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNERBQTRELENBQUMsQ0FBQztJQUMxRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFLbEIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7SUFDaEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5FTUxpYnJhcnksIE5ldHdvcmtUeXBlcywgU2ltcGxlV2FsbGV0LCBQYXNzd29yZCB9IGZyb20gXCJuZW0tbGlicmFyeVwiO1xyXG5cclxuLypcclxuLy8gUXVpbnRvIEVqZW1wbG8gT0tcclxuLy8gTGV5ZW5kbyB1bmEgd2FsbGV0IGRlc2RlIGVsIGRpc2NvXHJcbiovXHJcblxyXG5leHBvcnQgY29uc3Qgd2FsbGV0UmVhZGluZyA9ICgpID0+IHtcclxuICBcclxuICAvLyBEaXNwb25pYmlsaXphY2lvbiBkZWwgb2JqZXRvIGZzIChmaWxlIHN5c3RlbSkgZW4gbGEgdmFyaWFibGUgZnNcclxuICAvLyBMdWVnbyBlc3RhIHZhcmlhYmxlIG5vcyBwZXJtaXRpcmEgaW50ZXJhY3R1YXIgY29uIGVsIHNpc3RlbWEgZGVcclxuICAvLyBhcmNoaXZvcyBkZWwgc2lzdGVtYSBvcGVyYXRpdm9cclxuICBjb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJyk7XHJcblxyXG4gIC8vIENvbmZpZ3VyYWNpb24gZGUgbGEgcmVkIGRlIE5FTSBzb2JyZSBsYSBxdWUgcXVlcmVtb3MgdHJhYmFqYXJcclxuICBORU1MaWJyYXJ5LmJvb3RzdHJhcChOZXR3b3JrVHlwZXMuVEVTVF9ORVQpO1xyXG5cclxuICAvLyBWYXJpYWJsZSBwYXJhIHJlc2d1YXJkYXIgZWwgcGFzc3dvcmRcclxuICBjb25zdCBtaVdhbGxldFBhc3MgPSBuZXcgUGFzc3dvcmQoJzAxUHJpbWVyVGVzdFdhbGxldCcpO1xyXG5cclxuICAvLyBWYXJpYWJsZSBkb25kZSBzZSBhbG1hY2VuYSBsYSBydXRhIGRvbmRlIHNlIHZhIGEgZXNjcmliaXIgZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQgY3JlYWRhLlxyXG4gIGNvbnN0IHJ1dGFXYWxsZXQgPSAnQzpcXFxcX0N1cnNvXFxcXENyeXB0b1Byb2plY3RzXFxcXGJpbic7XHJcbiAgLy8gVmFyaWFibGUgcXVlIHJlZ2lzdHJhIGVsIG5vbWJyZSBkZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQgYSBndWFyZGFyXHJcbiAgY29uc3Qgbm9tYnJlV2FsbGV0RmlsZSA9ICdtaVdhbGxldC53bHQnO1xyXG4gIGxldCBmdWxsRmlsZVdhbGxldFBhdGggPSBgJHtydXRhV2FsbGV0fVxcXFwke25vbWJyZVdhbGxldEZpbGV9YDtcclxuXHJcbiAgLy8gTGV5ZW5kbyBlbCBhcmNoaXZvIGRlIGxhIHdhbGxldC4uLlxyXG4gIGNvbnNvbGUubG9nKCdDYXJnYW5kbyBlbCBjb250ZW5pZG8gZGVsIGFyY2hpdm8gKGVuIGNydWRvKSBkZSBsYSB3YWxsZXQgZW4gdW5hIHZhcmlhYmxlXFxuJyk7XHJcbiAgY29uc3QgdG1wU3RyTWlXYWxsZXQgPSBmcy5yZWFkRmlsZVN5bmMoYCR7ZnVsbEZpbGVXYWxsZXRQYXRofWAsICd1dGY4Jyk7XHJcbiAgY29uc29sZS5sb2coJ1xcbkVsIGFyY2hpdm8gXCJwdXJvXCIgZGUgbGEgd2FsbGV0IGNvbnRpZW5lOlxcbicpO1xyXG4gIGNvbnNvbGUubG9nKHRtcFN0ck1pV2FsbGV0KTtcclxuICBjb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG5cclxuICAvLyBTaSBsYSB3YWxsZXQgYSBsZWVyIGZ1ZSBjcmVhZGEgZGUgbWFuZXJhIHNlbmNpbGxhLCBlcyBkZWNpciwgc2luIHVzYXIgbGEgXCJOYW5vIFdhbGxldFwiLlxyXG4gIGNvbnN0IG1pV2FsbGV0ID0gU2ltcGxlV2FsbGV0LnJlYWRGcm9tV0xUKHRtcFN0ck1pV2FsbGV0KTtcclxuXHJcbiAgLy8gU2kgbGEgd2FsbGV0IGEgbGVlciBmdWUgY3JlYWRhIGNvbiBsYSBcIk5hbm8gV2FsbGxldFwiXHJcbiAgLy9jb25zdCBtaVdhbGxldCA9IFNpbXBsZVdhbGxldC5yZWFkRnJvbU5hbm9XYWxsZXRXTEYodG1wU3RyTWlXYWxsZXQpO1xyXG5cclxuICBjb25zb2xlLmxvZygnXFxuRWwgY29udGVuaWRvIGRlIGxhIHdhbGxldCBzZWd1biBORU0gZXM6XFxuJyk7XHJcbiAgY29uc29sZS5sb2cobWlXYWxsZXQpO1xyXG4gIGNvbnNvbGUubG9nKCdcXG4nKTtcclxuXHJcbiAgY29uc29sZS5sb2coJ1xcbkFicmllbmRvIGxhIHdhbGxldCBwYXJhIHZlciBsYSBpbmZvcm1hY2lvbiBkZXRhbGxhZGEgZGUgbGEgbWlzbWE6XFxuJyk7XHJcbiAgY29uc3QgbWlDdWVudGEgPSBtaVdhbGxldC5vcGVuKG1pV2FsbGV0UGFzcyk7XHJcbiAgY29uc29sZS5sb2coJ1xcbkxhIGluZm9ybWFjaW9uIGRlIGxhIGN1ZW50YSBjb250ZW5pZGEgZW4gbGEgd2FsbGV0IGVzOlxcbicpO1xyXG4gIGNvbnNvbGUubG9nKG1pQ3VlbnRhKTtcclxuICBjb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG5cclxuICAvLyBFeHRyYWUgbGEgYWRkcmVzcyBvIGRpcmVjY2lvbiBkZSBsYSB3YWxsZXQuXHJcbiAgLy8gTGEgYWRkcmVzcyBzZSBwdWVkZSBleHRyYWVyIGRlIGxhIG1pc21hIHdhbGxldCBvIGRlIGxhIGN1ZW50YVxyXG4gIGNvbnN0IG15QWRkcmVzcyA9IG1pV2FsbGV0LmFkZHJlc3M7XHJcbiAgY29uc29sZS5sb2coJ0xhIGFkZHJlc3MgbyBkaXJlY2Npb24gZGUgbGEgY3VlbnRhIGNvbnRlbmlkYSBlbiBsYSB3YWxsZXQgZXM6XFxuJyk7XHJcbiAgY29uc29sZS5sb2cobXlBZGRyZXNzLnByZXR0eSgpKTtcclxuICBjb25zb2xlLmxvZygnXFxuJyk7XHJcbn07XHJcbiJdfQ==