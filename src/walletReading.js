"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const nem_library_1 = require("nem-library");
exports.walletReading = () => {
    const fs = require('fs');
    nem_library_1.NEMLibrary.bootstrap(nem_library_1.NetworkTypes.TEST_NET);
    const miWalletPass = new nem_library_1.Password('01PrimerTestWallet');
    const rutaWallet = 'C:\\_Curso\\CryptoProjects\\bin';
    const nombreWalletFile = 'miWallet.wlt';
    let fullFileWalletPath = `${rutaWallet}\\${nombreWalletFile}`;
    console.log('Cargando el contenido del archivo (en crudo) de la wallet en una variable\n');
    const tmpStrMiWallet = fs.readFileSync(`${fullFileWalletPath}`, 'utf8');
    console.log('\nEl archivo "puro" de la wallet contiene:\n');
    console.log(tmpStrMiWallet);
    console.log('\n');
    const miWallet = nem_library_1.SimpleWallet.readFromWLT(tmpStrMiWallet);
    console.log('\nEl contenido de la wallet segun NEM es:\n');
    console.log(miWallet);
    console.log('\n');
    console.log('\nAbriendo la wallet para ver la informacion detallada de la misma:\n');
    const miCuenta = miWallet.open(miWalletPass);
    console.log('\nLa informacion de la cuenta contenida en la wallet es:\n');
    console.log(miCuenta);
    console.log('\n');
    const myAddress = miWallet.address;
    console.log('La address o direccion de la cuenta contenida en la wallet es:\n');
    console.log(myAddress.pretty());
    console.log('\n');
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FsbGV0UmVhZGluZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIndhbGxldFJlYWRpbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSw2Q0FBK0U7QUFPbEUsUUFBQSxhQUFhLEdBQUcsR0FBRyxFQUFFO0lBS2hDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUd6Qix3QkFBVSxDQUFDLFNBQVMsQ0FBQywwQkFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRzVDLE1BQU0sWUFBWSxHQUFHLElBQUksc0JBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO0lBR3hELE1BQU0sVUFBVSxHQUFHLGlDQUFpQyxDQUFDO0lBRXJELE1BQU0sZ0JBQWdCLEdBQUcsY0FBYyxDQUFDO0lBQ3hDLElBQUksa0JBQWtCLEdBQUcsR0FBRyxVQUFVLEtBQUssZ0JBQWdCLEVBQUUsQ0FBQztJQUc5RCxPQUFPLENBQUMsR0FBRyxDQUFDLDZFQUE2RSxDQUFDLENBQUM7SUFDM0YsTUFBTSxjQUFjLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxHQUFHLGtCQUFrQixFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDNUIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUlsQixNQUFNLFFBQVEsR0FBRywwQkFBWSxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUsxRCxPQUFPLENBQUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUM7SUFDM0QsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRWxCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUVBQXVFLENBQUMsQ0FBQztJQUNyRixNQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNERBQTRELENBQUMsQ0FBQztJQUMxRSxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUM7SUFLbEIsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQztJQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7SUFDaEYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztJQUNoQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5FTUxpYnJhcnksIE5ldHdvcmtUeXBlcywgU2ltcGxlV2FsbGV0LCBQYXNzd29yZCB9IGZyb20gXCJuZW0tbGlicmFyeVwiO1xyXG5cclxuLypcclxuLy8gUXVpbnRvIEVqZW1wbG8gT0tcclxuLy8gTGV5ZW5kbyB1bmEgd2FsbGV0IGRlc2RlIGVsIGRpc2NvXHJcbiovXHJcblxyXG5leHBvcnQgY29uc3Qgd2FsbGV0UmVhZGluZyA9ICgpID0+IHtcclxuXHJcbiAgLy8gRGlzcG9uaWJpbGl6YWNpb24gZGVsIG9iamV0byBmcyAoZmlsZSBzeXN0ZW0pIGVuIGxhIHZhcmlhYmxlIGZzXHJcbiAgLy8gTHVlZ28gZXN0YSB2YXJpYWJsZSBub3MgcGVybWl0aXJhIGludGVyYWN0dWFyIGNvbiBlbCBzaXN0ZW1hIGRlXHJcbiAgLy8gYXJjaGl2b3MgZGVsIHNpc3RlbWEgb3BlcmF0aXZvXHJcbiAgY29uc3QgZnMgPSByZXF1aXJlKCdmcycpO1xyXG5cclxuICAvLyBDb25maWd1cmFjaW9uIGRlIGxhIHJlZCBkZSBORU0gc29icmUgbGEgcXVlIHF1ZXJlbW9zIHRyYWJhamFyXHJcbiAgTkVNTGlicmFyeS5ib290c3RyYXAoTmV0d29ya1R5cGVzLlRFU1RfTkVUKTtcclxuXHJcbiAgLy8gVmFyaWFibGUgcGFyYSByZXNndWFyZGFyIGVsIHBhc3N3b3JkXHJcbiAgY29uc3QgbWlXYWxsZXRQYXNzID0gbmV3IFBhc3N3b3JkKCcwMVByaW1lclRlc3RXYWxsZXQnKTtcclxuXHJcbiAgLy8gVmFyaWFibGUgZG9uZGUgc2UgYWxtYWNlbmEgbGEgcnV0YSBkb25kZSBzZSB2YSBhIGVzY3JpYmlyIGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0IGNyZWFkYS5cclxuICBjb25zdCBydXRhV2FsbGV0ID0gJ0M6XFxcXF9DdXJzb1xcXFxDcnlwdG9Qcm9qZWN0c1xcXFxiaW4nO1xyXG4gIC8vIFZhcmlhYmxlIHF1ZSByZWdpc3RyYSBlbCBub21icmUgZGVsIGFyY2hpdm8gZGUgbGEgd2FsbGV0IGEgZ3VhcmRhclxyXG4gIGNvbnN0IG5vbWJyZVdhbGxldEZpbGUgPSAnbWlXYWxsZXQud2x0JztcclxuICBsZXQgZnVsbEZpbGVXYWxsZXRQYXRoID0gYCR7cnV0YVdhbGxldH1cXFxcJHtub21icmVXYWxsZXRGaWxlfWA7XHJcblxyXG4gIC8vIExleWVuZG8gZWwgYXJjaGl2byBkZSBsYSB3YWxsZXQuLi5cclxuICBjb25zb2xlLmxvZygnQ2FyZ2FuZG8gZWwgY29udGVuaWRvIGRlbCBhcmNoaXZvIChlbiBjcnVkbykgZGUgbGEgd2FsbGV0IGVuIHVuYSB2YXJpYWJsZVxcbicpO1xyXG4gIGNvbnN0IHRtcFN0ck1pV2FsbGV0ID0gZnMucmVhZEZpbGVTeW5jKGAke2Z1bGxGaWxlV2FsbGV0UGF0aH1gLCAndXRmOCcpO1xyXG4gIGNvbnNvbGUubG9nKCdcXG5FbCBhcmNoaXZvIFwicHVyb1wiIGRlIGxhIHdhbGxldCBjb250aWVuZTpcXG4nKTtcclxuICBjb25zb2xlLmxvZyh0bXBTdHJNaVdhbGxldCk7XHJcbiAgY29uc29sZS5sb2coJ1xcbicpO1xyXG5cclxuXHJcbiAgLy8gU2kgbGEgd2FsbGV0IGEgbGVlciBmdWUgY3JlYWRhIGRlIG1hbmVyYSBzZW5jaWxsYSwgZXMgZGVjaXIsIHNpbiB1c2FyIGxhIFwiTmFubyBXYWxsZXRcIi5cclxuICBjb25zdCBtaVdhbGxldCA9IFNpbXBsZVdhbGxldC5yZWFkRnJvbVdMVCh0bXBTdHJNaVdhbGxldCk7XHJcblxyXG4gIC8vIFNpIGxhIHdhbGxldCBhIGxlZXIgZnVlIGNyZWFkYSBjb24gbGEgXCJOYW5vIFdhbGxsZXRcIlxyXG4gIC8vY29uc3QgbWlXYWxsZXQgPSBTaW1wbGVXYWxsZXQucmVhZEZyb21OYW5vV2FsbGV0V0xGKHRtcFN0ck1pV2FsbGV0KTtcclxuXHJcbiAgY29uc29sZS5sb2coJ1xcbkVsIGNvbnRlbmlkbyBkZSBsYSB3YWxsZXQgc2VndW4gTkVNIGVzOlxcbicpO1xyXG4gIGNvbnNvbGUubG9nKG1pV2FsbGV0KTtcclxuICBjb25zb2xlLmxvZygnXFxuJyk7XHJcblxyXG4gIGNvbnNvbGUubG9nKCdcXG5BYnJpZW5kbyBsYSB3YWxsZXQgcGFyYSB2ZXIgbGEgaW5mb3JtYWNpb24gZGV0YWxsYWRhIGRlIGxhIG1pc21hOlxcbicpO1xyXG4gIGNvbnN0IG1pQ3VlbnRhID0gbWlXYWxsZXQub3BlbihtaVdhbGxldFBhc3MpO1xyXG4gIGNvbnNvbGUubG9nKCdcXG5MYSBpbmZvcm1hY2lvbiBkZSBsYSBjdWVudGEgY29udGVuaWRhIGVuIGxhIHdhbGxldCBlczpcXG4nKTtcclxuICBjb25zb2xlLmxvZyhtaUN1ZW50YSk7XHJcbiAgY29uc29sZS5sb2coJ1xcbicpO1xyXG5cclxuXHJcbiAgLy8gRXh0cmFlIGxhIGFkZHJlc3MgbyBkaXJlY2Npb24gZGUgbGEgd2FsbGV0LlxyXG4gIC8vIExhIGFkZHJlc3Mgc2UgcHVlZGUgZXh0cmFlciBkZSBsYSBtaXNtYSB3YWxsZXQgbyBkZSBsYSBjdWVudGFcclxuICBjb25zdCBteUFkZHJlc3MgPSBtaVdhbGxldC5hZGRyZXNzO1xyXG4gIGNvbnNvbGUubG9nKCdMYSBhZGRyZXNzIG8gZGlyZWNjaW9uIGRlIGxhIGN1ZW50YSBjb250ZW5pZGEgZW4gbGEgd2FsbGV0IGVzOlxcbicpO1xyXG4gIGNvbnNvbGUubG9nKG15QWRkcmVzcy5wcmV0dHkoKSk7XHJcbiAgY29uc29sZS5sb2coJ1xcbicpO1xyXG59O1xyXG4iXX0=